<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hoyoung's Blog]]></title>
  <subtitle><![CDATA[独具匠心]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.hoyoung.net/"/>
  <updated>2017-09-09T05:09:54.000Z</updated>
  <id>http://www.hoyoung.net/</id>
  
  <author>
    <name><![CDATA[hoyoung]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[C51单片机Ubuntu基本开发环境]]></title>
    <link href="http://www.hoyoung.net/2017/09/09/ubuntu-c51-dev/"/>
    <id>http://www.hoyoung.net/2017/09/09/ubuntu-c51-dev/</id>
    <published>2017-09-08T17:10:10.000Z</published>
    <updated>2017-09-09T05:09:54.000Z</updated>
    <content type="html"><![CDATA[<p>已经不知道从什么时候开始，在我的字典里，windows已经成为了游戏机，除了打游戏，我基本不用windows了，公司的mac笔记本也只是处理些办公事物，开发基本在linux下，而我自己家里使用的也是Ubuntu系统。想起自己本科的时候还没怎么接触过linux，那时候搞写电子小制作，对windows下的环境配置搞的还挺熟的，毕业后等我拾起搁置三年的爱好时，当年熟悉的windows开发环境已经不在，从头开始，搭建Ubuntu下的开发环境吧。（这货BB了半天，终于开始正题了）</p>
<h1 id="安装编译工具"><a href="#安装编译工具" class="headerlink" title="安装编译工具"></a>安装编译工具</h1><p>大概的百度了下，Linux下的C51开发环境的资料还真是不多，各种资料几乎被Keil C51统治。一万头草泥马呼啸而过，不早就听说他们做嵌入式开发的都在Linux下搞吗，怎么资料这么少。不过好在Linux开源社区的强大，这些都不是问题。首先是编译器，windows下keil c51 ide集成了编译器，具体什么编译器我也忘记了。而linux下的编译器叫sdcc，想详细了解的自己百度，我在这里介绍也是没他们说的详细，反正它就是个编译器。在Ubuntu下可以在仓库中直接安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sudo apt-get install sdcc</div></pre></td></tr></table></figure>
<h1 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h1><p>创建文件main.c做测试，代码很简单，单片机P1.0脚电平高低交换，LED会闪烁。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;8052.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">size_t</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LED P1_0</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">size_t</span> t)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">while</span>(t--) <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">                LED = <span class="number">0</span>;</div><div class="line">                delay(<span class="number">200</span>);</div><div class="line">                LED = <span class="number">1</span>;</div><div class="line">                delay(<span class="number">200</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sdcc main.c</div></pre></td></tr></table></figure>
<p>sdcc工具有很多参数，它不止能编译c51项目，arm、汇编、stm等都能编译，默认是编译c51项目。编译结果会产出很多文件，我们只需要main.ihx文件即可。</p>
<h1 id="安装STC的烧写工具"><a href="#安装STC的烧写工具" class="headerlink" title="安装STC的烧写工具"></a>安装STC的烧写工具</h1><p>STC这个公司没有开放bootloader，而且传输协议也不公开，而其提供的烧录工具只有windows平台的，不过幸好有大神破解了，写了个python版本的烧录器<a href="https://github.com/grigorig/stcgal" target="_blank" rel="external">https://github.com/grigorig/stcgal</a>，如果你熟悉python，这些对你来说都不是事儿，如果不熟悉，建议简单了解下。从github上克隆下来后按照说明直接安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">./setup.py install</div></pre></td></tr></table></figure>
<p>根据错误提示，还需要安装一些依赖的python包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">pip install pyserial</div><div class="line">sudo apt install python-serial</div></pre></td></tr></table></figure>
<p>我的python环境是2.7.13版本，由于python3和python2版本差异较大，如果你是python3的环境，请安装<code>python3-serial</code>。</p>
<p>安装完成后，测试检查能否读取到MCU的信息。Ubuntu系统都内置了常用PL2303芯片USB转串口的驱动，将USB串口下载板插到PC上以后查看对应的设备名称。这里和windows不一样，没有叫com口的东西。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">ls /dev/ttyUSB*</div></pre></td></tr></table></figure>
<p><img src="/uploads/2017/09/ubuntu_dev_usb.png" alt=""></p>
<p>比如我的串口设备就是/dev/ttyUSB0。我自己使用的STC12C5A60S2进行测试，所以单片机类型选择stc12。另外，因为程序要读取com口，需要root权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sudo ./stcgal.py -P stc12</div></pre></td></tr></table></figure>
<p>首先程序会提示你给单片机重新上电，如果单片机当前处在断电状态，我们直接上电就行。如果处于上电状态，我们关闭电源再打开即可。正确的输出如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">Waiting for MCU, please cycle power: done</div><div class="line">Target model:</div><div class="line">  Name: STC12C5A60S2</div><div class="line">  Magic: D17E</div><div class="line">  Code flash: 60.0 KB</div><div class="line">  EEPROM flash: 2.0 KB</div><div class="line">Target frequency: 22.077 MHz</div><div class="line">Target BSL version: 6.2I</div><div class="line">Target options:</div><div class="line">  reset_pin_enabled=True</div><div class="line">  low_voltage_reset=False</div><div class="line">  oscillator_stable_delay=32768</div><div class="line">  por_reset_delay=long</div><div class="line">  clock_gain=high</div><div class="line">  clock_source=external</div><div class="line">  watchdog_por_enabled=False</div><div class="line">  watchdog_stop_idle=True</div><div class="line">  watchdog_prescale=256</div><div class="line">  eeprom_erase_enabled=False</div><div class="line">  bsl_pindetect_enabled=False</div><div class="line">Disconnected!</div></pre></td></tr></table></figure>
<p>这里有人要问，端口呢？如果只有一个可用的USB串口设备，这个烧录程序可以自动识别出来，不用手动指定。</p>
<p>二进制程序烧录</p>
<p>前面我没有想其他教程一样将ihx文件转换为hex二进制文件，这个烧录程序支持hex,bin,ihx文件，我们使用sdcc编译出的main.ihx可直接交给程序烧录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sudo ./stcgal.py -P stc12 main.ihx</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">Waiting for MCU, please cycle power: done</div><div class="line">Target model:</div><div class="line">  Name: STC12C5A60S2</div><div class="line">  Magic: D17E</div><div class="line">  Code flash: 60.0 KB</div><div class="line">  EEPROM flash: 2.0 KB</div><div class="line">Target frequency: 22.077 MHz</div><div class="line">Target BSL version: 6.2I</div><div class="line">Target options:</div><div class="line">  reset_pin_enabled=True</div><div class="line">  low_voltage_reset=False</div><div class="line">  oscillator_stable_delay=32768</div><div class="line">  por_reset_delay=long</div><div class="line">  clock_gain=high</div><div class="line">  clock_source=external</div><div class="line">  watchdog_por_enabled=False</div><div class="line">  watchdog_stop_idle=True</div><div class="line">  watchdog_prescale=256</div><div class="line">  eeprom_erase_enabled=False</div><div class="line">  bsl_pindetect_enabled=False</div><div class="line">Loading flash: 138 bytes (Intel HEX)</div><div class="line">Switching to 19200 baud: testing setting done</div><div class="line">Erasing 2 blocks: done</div><div class="line">Writing 512 bytes: .... done</div><div class="line">Finishing write: done</div><div class="line">Setting options: done</div><div class="line">Target UID: 000300AF059688</div><div class="line">Disconnected!</div></pre></td></tr></table></figure>
<p>烧录完成，自己看效果吧。有些人会纠结于没有图形界面的烧录工具，之前我也寻找过，找到一个，名字我给忘记了，那个工具我看已经很久没有维护了，而且我不知道是自己环境有问题还是怎么滴，没有烧录成功。其实如果在Linux下开发久会发现，命令行的工具才是最正常的，大多情况下我们是没有外接显示器给你显示图形界面的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经不知道从什么时候开始，在我的字典里，windows已经成为了游戏机，除了打游戏，我基本不用windows了，公司的mac笔记本也只是处理些办公事物，开发基本在linux下，而我自己家里使用的也是Ubuntu系统。想起自己本科的时候还没怎么接触过linux，那时候搞写电子]]>
    </summary>
    
      <category term="Ubuntu" scheme="http://www.hoyoung.net/tags/Ubuntu/"/>
    
      <category term="MCU" scheme="http://www.hoyoung.net/tags/MCU/"/>
    
      <category term="SDCC" scheme="http://www.hoyoung.net/tags/SDCC/"/>
    
      <category term="DIY" scheme="http://www.hoyoung.net/categories/DIY/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu下搭建高匿HTTP代理]]></title>
    <link href="http://www.hoyoung.net/2017/02/10/squid3-proxy/"/>
    <id>http://www.hoyoung.net/2017/02/10/squid3-proxy/</id>
    <published>2017-02-10T03:41:40.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="功能用途"><a href="#功能用途" class="headerlink" title="功能用途"></a>功能用途</h2><p>我们在生活中见过各种代理，比如我们距离火车站较远，我们可以选择通过距离最近的火车票代售点来购买火车票。又比如商品代理商，我们拿不到厂家的直接或者，可以通过厂家授权的代理经销商来获得产品。代理服务器负责转发你的请求到目标服务器，然后将目标服务器的响应反馈给你。你可以理解为它就是个联姻的媒婆。代理服务器可以有很多用途，比如：</p>
<ul>
<li>作为一个网络防火墙，将内网与外网隔开。是的外网只能访问代理服务器允许的边界，这是我们常见的正向代理，比如ningx的转发。另外，在一个局域网中如果有一台主机可以上外网，那么我们就可以把这台机器作为代理服务器，为其他机器提供外网的访问功能。</li>
<li>作为反爬利器，如果爬虫爬取的目标网站具有较强的反爬机制，最常见的通过IP来限制抓取频率，如果你的爬虫抓取太快，你的IP就会被封禁一段时间甚至永久封禁。此时我们就可以通过高匿代理让抓取的网站识别不出我们的真实IP。</li>
</ul>
<a id="more"></a>
<h2 id="代理安装"><a href="#代理安装" class="headerlink" title="代理安装"></a>代理安装</h2><h3 id="安装squid3"><a href="#安装squid3" class="headerlink" title="安装squid3"></a>安装squid3</h3><p>我是在Ubuntu14.04 64位环境下使用squid3搭建的代理服务器。squid3是一个主流的可配置的、健壮、低消耗的代理服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install squid3</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>squid3的配置文件在/etc/squid3/squid.conf，我们使用vim编辑器来配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo vim /etc/squid3/squid.conf</div></pre></td></tr></table></figure>
<p>我们在配置文件的末尾加入以下几行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#允许的客户端ip</div><div class="line">acl allcomputers src 0.0.0.0/0.0.0.0</div><div class="line">#配置用户名密码，后面会生成passwords文件</div><div class="line">auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/passwords</div><div class="line">auth_param basic realm proxy</div><div class="line">acl authenticated proxy_auth REQUIRED</div><div class="line">http_access allow authenticated allcomputers</div></pre></td></tr></table></figure>
<p>找到http_access deny all并注释掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#http_access deny all</div></pre></td></tr></table></figure>
<p>最好修改一下默认的3128端口，因为这个端口是默认的，很容易被网络上的代理爬虫探测到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http_port 8128</div></pre></td></tr></table></figure>
<h3 id="用户名密码认证"><a href="#用户名密码认证" class="headerlink" title="用户名密码认证"></a>用户名密码认证</h3><p>网络上有很多专门爬免认证的代理的爬虫，如果我们自己搭建的代理服务器不加认证的话，会被这些爬虫探测到然后沦为了免费代理。</p>
<p>使用htpasswd来创建passwords文件，htpasswd命令在软件包apache2-utils中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install apache2-utils</div></pre></td></tr></table></figure>
<p>生成password文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo htpasswd -c -d /etc/squid3/passwords 自定义用户名</div></pre></td></tr></table></figure>
<p>然后输入两次至少8位的密码，会在/etc/squid3/目录下生成passwords文件，要保证该文件是可读的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo chmod o+r /etc/squid3/passwords</div></pre></td></tr></table></figure>
<p>启动服务，也可以使用restart，stop进行重启和关闭。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo service squid3 start</div></pre></td></tr></table></figure>
<h3 id="验证代理是否起作用"><a href="#验证代理是否起作用" class="headerlink" title="验证代理是否起作用"></a>验证代理是否起作用</h3><p>squid3的访问日志文件在/var/log/squid3/access.log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tail -f /var/log/squid3/access.log</div></pre></td></tr></table></figure>
<p>另找一台linux机器打开shell，将我们的代理配置上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export http_proxy=&quot;http://用户名:密码@代理IP:代理端口&quot;</div><div class="line">curl -l &quot;http://www.baidu.com&quot;</div></pre></td></tr></table></figure>
<p>如果代理配置正确，回输出html，同时代理服务器上的access.log会记录这次请求。</p>
<h3 id="配置高匿"><a href="#配置高匿" class="headerlink" title="配置高匿"></a>配置高匿</h3><p>代理分为透明代理、匿名代理、混淆代理、高匿代理，这4种代理，主要是在代理服务器端的配置不同，导致其向目标地址发送请求时，REMOTE_ADDR， HTTP_VIA，HTTP_X_FORWARDED_FOR三个变量不同。</p>
<p>1.透明代理(Transparent Proxy)<br>REMOTE_ADDR = Proxy IP<br>HTTP_VIA = Proxy IP<br>HTTP_X_FORWARDED_FOR = Your IP<br>透明代理虽然可以直接“隐藏”你的IP地址，但是还是可以从HTTP_X_FORWARDED_FOR来查到你是谁。</p>
<p>2.匿名代理(Anonymous Proxy)</p>
<p>REMOTE_ADDR = proxy IP<br>HTTP_VIA = proxy IP<br>HTTP_X_FORWARDED_FOR = proxy IP<br>匿名代理比透明代理进步了一点：别人只能知道你用了代理，无法知道你是谁。</p>
<p>3.混淆代理(Distorting Proxies)</p>
<p>REMOTE_ADDR = Proxy IP<br>HTTP_VIA = Proxy IP<br>HTTP_X_FORWARDED_FOR = Random IP address</p>
<p>如上，与匿名代理相同，如果使用了混淆代理，别人还是能知道你在用代理，但是会得到一个假的IP地址，伪装的更逼真</p>
<p>4.高匿代理(Elite proxy或High Anonymity Proxy)</p>
<p>REMOTE_ADDR = Proxy IP<br>HTTP_VIA = not determined<br>HTTP_X_FORWARDED_FOR = not determined<br>可以看出来，高匿代理让别人根本无法发现你是在用代理，所以是最好的选择。</p>
<p>下面是squid3高匿的设置，我们修改配置文件squid.conf，在最后加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">request_header_access X-Forwarded-For deny all  </div><div class="line">request_header_access From deny all  </div><div class="line">request_header_access Via deny all</div></pre></td></tr></table></figure>
<p>测试高匿是否生效，我们用上面同样的方法访问，会显示出你使用的IP的地址，我们就可以判断显示的IP和我们使用的代理IP是否相同，如果相同，则匿名生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -l &quot;http://1212.ip138.com/ic.asp&quot;</div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="功能用途"><a href="#功能用途" class="headerlink" title="功能用途"></a>功能用途</h2><p>我们在生活中见过各种代理，比如我们距离火车站较远，我们可以选择通过距离最近的火车票代售点来购买火车票。又比如商品代理商，我们拿不到厂家的直接或者，可以通过厂家授权的代理经销商来获得产品。代理服务器负责转发你的请求到目标服务器，然后将目标服务器的响应反馈给你。你可以理解为它就是个联姻的媒婆。代理服务器可以有很多用途，比如：</p>
<ul>
<li>作为一个网络防火墙，将内网与外网隔开。是的外网只能访问代理服务器允许的边界，这是我们常见的正向代理，比如ningx的转发。另外，在一个局域网中如果有一台主机可以上外网，那么我们就可以把这台机器作为代理服务器，为其他机器提供外网的访问功能。</li>
<li>作为反爬利器，如果爬虫爬取的目标网站具有较强的反爬机制，最常见的通过IP来限制抓取频率，如果你的爬虫抓取太快，你的IP就会被封禁一段时间甚至永久封禁。此时我们就可以通过高匿代理让抓取的网站识别不出我们的真实IP。</li>
</ul>]]>
    
    </summary>
    
      <category term="代理" scheme="http://www.hoyoung.net/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="squid3" scheme="http://www.hoyoung.net/tags/squid3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mongodb-driver使用]]></title>
    <link href="http://www.hoyoung.net/2017/02/09/mongodb-driver-tutorial/"/>
    <id>http://www.hoyoung.net/2017/02/09/mongodb-driver-tutorial/</id>
    <published>2017-02-09T08:38:42.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Java-MongoDB-Driver使用"><a href="#Java-MongoDB-Driver使用" class="headerlink" title="Java MongoDB Driver使用"></a>Java MongoDB Driver使用</h1><p>下面的代码片段都来自 <a href="https://github.com/mongodb/mongo-java-driver/blob/master/driver/src/examples/tour/QuickTour.java" target="_blank" rel="external">QuickTour.java</a>。</p>
<p>英文原文：<a href="http://mongodb.github.io/mongo-java-driver/3.2/driver/getting-started/quick-tour/" target="_blank" rel="external">http://mongodb.github.io/mongo-java-driver/3.2/driver/getting-started/quick-tour/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我使用了maven项目构建工具，引入依赖即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;3.2.2&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>建议引入mongo-java-driver，它包含了bson和mongodb-driver-core  </p>
</blockquote>
<a id="more"></a>
<h2 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 直接连接单机的MongoDB服务器</div><div class="line">MongoClient mongoClient = new MongoClient();</div><div class="line">// 或者</div><div class="line">MongoClient mongoClient = new MongoClient( &quot;localhost&quot; );</div><div class="line">// 或者</div><div class="line">MongoClient mongoClient = new MongoClient( &quot;localhost&quot; , 27017 );</div><div class="line"></div><div class="line">// 连接一个集群</div><div class="line">MongoClient mongoClient = new MongoClient(</div><div class="line">  Arrays.asList(new ServerAddress(&quot;localhost&quot;, 27017),</div><div class="line">                new ServerAddress(&quot;localhost&quot;, 27018),</div><div class="line">                new ServerAddress(&quot;localhost&quot;, 27019)));</div><div class="line">// 或者使用uri</div><div class="line">MongoClientURI connectionString = new MongoClientURI(&quot;mongodb://localhost:27017,localhost:27018,localhost:27019&quot;);</div><div class="line">MongoClient mongoClient = new MongoClient(connectionString);</div><div class="line">MongoDatabase database = mongoClient.getDatabase(&quot;mydb&quot;);</div></pre></td></tr></table></figure>
<h3 id="MongoClient"><a href="#MongoClient" class="headerlink" title="MongoClient"></a>MongoClient</h3><p> <code>MongoClient</code>实例实际上代表了一个数据库连接池; 即使在多线程环境下也只需要一个 `MongoClient实例。</p>
<h2 id="获取Collection"><a href="#获取Collection" class="headerlink" title="获取Collection"></a>获取Collection</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MongoCollection&lt;Document&gt; collection = database.getCollection(&quot;test&quot;);</div></pre></td></tr></table></figure>
<h2 id="插入Document"><a href="#插入Document" class="headerlink" title="插入Document"></a>插入Document</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;name&quot; : &quot;MongoDB&quot;,</div><div class="line">   &quot;type&quot; : &quot;database&quot;,</div><div class="line">   &quot;count&quot; : 1,</div><div class="line">   &quot;info&quot; : &#123;</div><div class="line">               x : 203,</div><div class="line">               y : 102</div><div class="line">             &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于上面的json对象，我们使用Document类来构建，你也可以使用这个类构建嵌套的Document。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Document doc = new Document(&quot;name&quot;, &quot;MongoDB&quot;)</div><div class="line">               .append(&quot;type&quot;, &quot;database&quot;)</div><div class="line">               .append(&quot;count&quot;, 1)</div><div class="line">               .append(&quot;info&quot;, new Document(&quot;x&quot;, 203).append(&quot;y&quot;, 102));</div></pre></td></tr></table></figure>
<p>将Document插入到collection中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">collection.insertOne(doc);</div></pre></td></tr></table></figure>
<h2 id="多个Documents"><a href="#多个Documents" class="headerlink" title="多个Documents"></a>多个Documents</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">List&lt;Document&gt; documents = new ArrayList&lt;Document&gt;();</div><div class="line">for (int i = 0; i &lt; 100; i++) &#123;</div><div class="line">    documents.add(new Document(&quot;i&quot;, i));</div><div class="line">&#125;</div><div class="line">collection.insertMany(documents);</div></pre></td></tr></table></figure>
<h2 id="获取Documents的数目"><a href="#获取Documents的数目" class="headerlink" title="获取Documents的数目"></a>获取Documents的数目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">System.out.println(collection.count());</div></pre></td></tr></table></figure>
<h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><p>我们可以在find()操作后调用first()方法获取第一个文档，这可以用来匹配唯一的文档，或者你就想获取第一个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Document myDoc = collection.find().first();</div><div class="line">System.out.println(myDoc.toJson());</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : &#123; &quot;$oid&quot; : &quot;551582c558c7b4fbacf16735&quot; &#125;,</div><div class="line">  &quot;name&quot; : &quot;MongoDB&quot;, &quot;type&quot; : &quot;database&quot;, &quot;count&quot; : 1,</div><div class="line">  &quot;info&quot; : &#123; &quot;x&quot; : 203, &quot;y&quot; : 102 &#125; &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>“_id”字段是mongodb自动加入的</p>
</blockquote>
<h3 id="查询集合所有的文档"><a href="#查询集合所有的文档" class="headerlink" title="查询集合所有的文档"></a>查询集合所有的文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MongoCursor&lt;Document&gt; cursor = collection.find().iterator();</div><div class="line">try &#123;</div><div class="line">    while (cursor.hasNext()) &#123;</div><div class="line">        System.out.println(cursor.next().toJson());</div><div class="line">    &#125;</div><div class="line">&#125; finally &#123;</div><div class="line">    cursor.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的语法是可行的，但是不推荐，因为如果中途退出会造成游标没有关闭。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">for (Document cur : collection.find()) &#123;</div><div class="line">    System.out.println(cur.toJson());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用查询过滤获取唯一的文档"><a href="#使用查询过滤获取唯一的文档" class="headerlink" title="使用查询过滤获取唯一的文档"></a>使用查询过滤获取唯一的文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import static com.mongodb.client.model.Filters.*;</div><div class="line"></div><div class="line">myDoc = collection.find(eq(&quot;i&quot;, 71)).first();</div><div class="line">System.out.println(myDoc.toJson());</div></pre></td></tr></table></figure>
<p>这里使用了static关键词的的静态导包功能。</p>
<blockquote>
<p>使用 <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/filters/" target="_blank" rel="external"><code>Filters</code></a>, <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/sorts/" target="_blank" rel="external"><code>Sorts</code></a>, <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/projections/" target="_blank" rel="external"><code>Projections</code></a> 和 <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/updates/" target="_blank" rel="external"><code>Updates</code></a> 来创建查询条件</p>
</blockquote>
<h2 id="使用查询获取文档集合"><a href="#使用查询获取文档集合" class="headerlink" title="使用查询获取文档集合"></a>使用查询获取文档集合</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 获取子集</div><div class="line">Block&lt;Document&gt; printBlock = new Block&lt;Document&gt;() &#123;</div><div class="line">     @Override</div><div class="line">     public void apply(final Document document) &#123;</div><div class="line">         System.out.println(document.toJson());</div><div class="line">     &#125;</div><div class="line">&#125;;</div><div class="line">collection.find(gt(&quot;i&quot;, 50)).forEach(printBlock);</div></pre></td></tr></table></figure>
<p>使用and可以限制更多的条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">collection.find(and(gt(&quot;i&quot;, 50), lte(&quot;i&quot;, 100))).forEach(printBlock);</div></pre></td></tr></table></figure>
<h2 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h2><p>我们可以使用 <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/sorts/" target="_blank" rel="external"><code>Sorts</code></a> 工具类对文档进行排序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">myDoc = collection.find(Filters.exists(&quot;i&quot;)).sort(Sorts.descending(&quot;i&quot;)).first();</div><div class="line">System.out.println(myDoc.toJson());</div></pre></td></tr></table></figure>
<h2 id="限制字段"><a href="#限制字段" class="headerlink" title="限制字段"></a>限制字段</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">myDoc = collection.find().projection(Projections.excludeId()).first();</div><div class="line">System.out.println(myDoc.toJson());</div></pre></td></tr></table></figure>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p> <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/aggregation/" target="_blank" rel="external"><code>Aggregates</code></a> 工具类提供了聚合阶段创建工作。</p>
<p>下面是个两阶段的例子，首先我们计算 <code>i * 10</code>。我们使用 <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/aggregation/#match" target="_blank" rel="external"><code>Aggregates.match</code></a> 找到所有 <code>i &gt; 0</code> 文档。 Then we reshape the document by using <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/aggregation/#project" target="_blank" rel="external"><code>Aggregates.project</code></a> in conjunction with the <a href="http://docs.mongodb.org/manual/reference/operator/aggregation/multiply/" target="_blank" rel="external"><code>$multiply</code></a> operator to calculate the “<code>ITimes10</code>” value:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">collection.aggregate(asList(</div><div class="line">        match(gt(&quot;i&quot;, 0)),</div><div class="line">        project(Document.parse(&quot;&#123;ITimes10: &#123;$multiply: [&apos;$i&apos;, 10]&#125;&#125;&quot;)))</div><div class="line">).forEach(printBlock);</div></pre></td></tr></table></figure>
<p>For <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/aggregation/#group" target="_blank" rel="external"><code>$group</code></a> operations use the <a href="http://api.mongodb.org/java/3.2/?com/mongodb/client/model/Accumulators.html" target="_blank" rel="external"><code>Accumulators</code></a> helper for any <a href="http://docs.mongodb.org/manual/reference/operator/aggregation/group/#accumulator-operator" target="_blank" rel="external">accumulator operations</a>. Below we sum up all the values of <code>i</code> by using the <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/aggregation/#group" target="_blank" rel="external"><code>Aggregates.group</code></a> helper in conjunction with the <a href="http://api.mongodb.org/java/3.2/?com/mongodb/client/model/Accumulators#sum-java.lang.String-TExpression-.html" target="_blank" rel="external"><code>Accumulators.sum</code></a>helper:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">myDoc = collection.aggregate(singletonList(group(null, sum(&quot;total&quot;, &quot;$i&quot;)))).first();</div><div class="line">System.out.println(myDoc.toJson());</div></pre></td></tr></table></figure>
<blockquote>
<p>Currently, there are no helpers for <a href="http://docs.mongodb.org/manual/meta/aggregation-quick-reference/#aggregation-expressions" target="_blank" rel="external">aggregation expressions</a>. Use the <a href="http://mongodb.github.io/mongo-java-driver/3.2/bson/extended-json/" target="_blank" rel="external"><code>Document.parse()</code></a> helper to quickly build aggregation expressions from extended JSON.</p>
</blockquote>
<h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>MongoDB支持很多 <a href="http://docs.mongodb.org/manual/reference/operator/update-field/" target="_blank" rel="external">更新操作</a> 。</p>
<p>我们使用 <a href="http://mongodb.github.io/mongo-java-driver/3.2/builders/updates/#set" target="_blank" rel="external"><code>Updates.set</code></a> 来更新满足i==10第一个文档 ，把i更新为110：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">collection.updateOne(eq(&quot;i&quot;, 10), set(&quot;i&quot;, 110));</div></pre></td></tr></table></figure>
<p>使用 <a href="http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-" target="_blank" rel="external"><code>updateMany</code></a> 来更新所有满足条件的文档。我们使用[<code>Updates.inc</code>把小于100的i增加100：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UpdateResult updateResult = collection.updateMany(lt(&quot;i&quot;, 100), inc(&quot;i&quot;, 100));</div><div class="line">System.out.println(updateResult.getModifiedCount());</div></pre></td></tr></table></figure>
<p><a href="http://api.mongodb.org/java/3.2/?com/mongodb/client/result/UpdateResult.html" target="_blank" rel="external"><code>UpdateResult</code></a> 提供了操作完成后修改的数量。</p>
<h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">collection.deleteOne(eq(&quot;i&quot;, 110));</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DeleteResult deleteResult = collection.deleteMany(gte(&quot;i&quot;, 100));</div><div class="line">System.out.println(deleteResult.getDeletedCount());</div></pre></td></tr></table></figure>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>These new commands allow for the execution of bulk insert/update/delete operations. There are two types of bulk operations:</p>
<ol>
<li>有序的批量操作，顺序执行所有操作，一旦出错就停止。</li>
<li>无序批量操作，执行所有的操作，无序的批量操作并不能保证执行顺序。</li>
</ol>
<p>让我们看两个有序和无序批量操作的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 2. 有序批量操作——顺序有保证</div><div class="line">collection.bulkWrite(</div><div class="line">  Arrays.asList(new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 4)),</div><div class="line">                new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 5)),</div><div class="line">                new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 6)),</div><div class="line">                new UpdateOneModel&lt;&gt;(new Document(&quot;_id&quot;, 1),</div><div class="line">                                     new Document(&quot;$set&quot;, new Document(&quot;x&quot;, 2))),</div><div class="line">                new DeleteOneModel&lt;&gt;(new Document(&quot;_id&quot;, 2)),</div><div class="line">                new ReplaceOneModel&lt;&gt;(new Document(&quot;_id&quot;, 3),</div><div class="line">                                      new Document(&quot;_id&quot;, 3).append(&quot;x&quot;, 4))));</div><div class="line"></div><div class="line"></div><div class="line"> // 2. 无序批量操作——不保证执行顺序</div><div class="line">collection.bulkWrite(</div><div class="line">  Arrays.asList(new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 4)),</div><div class="line">                new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 5)),</div><div class="line">                new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 6)),</div><div class="line">                new UpdateOneModel&lt;&gt;(new Document(&quot;_id&quot;, 1),</div><div class="line">                                     new Document(&quot;$set&quot;, new Document(&quot;x&quot;, 2))),</div><div class="line">                new DeleteOneModel&lt;&gt;(new Document(&quot;_id&quot;, 2)),</div><div class="line">                new ReplaceOneModel&lt;&gt;(new Document(&quot;_id&quot;, 3),</div><div class="line">                                      new Document(&quot;_id&quot;, 3).append(&quot;x&quot;, 4))),</div><div class="line">  new BulkWriteOptions().ordered(false));</div></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Java-MongoDB-Driver使用"><a href="#Java-MongoDB-Driver使用" class="headerlink" title="Java MongoDB Driver使用"></a>Java MongoDB Driver使用</h1><p>下面的代码片段都来自 <a href="https://github.com/mongodb/mongo-java-driver/blob/master/driver/src/examples/tour/QuickTour.java" target="_blank" rel="external">QuickTour.java</a>。</p>
<p>英文原文：<a href="http://mongodb.github.io/mongo-java-driver/3.2/driver/getting-started/quick-tour/" target="_blank" rel="external">http://mongodb.github.io/mongo-java-driver/3.2/driver/getting-started/quick-tour/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我使用了maven项目构建工具，引入依赖即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;3.2.2&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>建议引入mongo-java-driver，它包含了bson和mongodb-driver-core  </p>
</blockquote>]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.hoyoung.net/tags/Java/"/>
    
      <category term="数据库" scheme="http://www.hoyoung.net/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mongodb" scheme="http://www.hoyoung.net/tags/mongodb/"/>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[numpy中文教程]]></title>
    <link href="http://www.hoyoung.net/2016/12/16/numpy-tutorial/"/>
    <id>http://www.hoyoung.net/2016/12/16/numpy-tutorial/</id>
    <published>2016-12-16T02:36:01.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>##基本介绍<br>Numpy的主要对象是同质多维数组，同质是指数组里的元素都是相同的类型。Numpy的数组被称为<code>ndarray</code>,也有别名叫<code>array</code>.Python标准库的类<code>array.array</code>只提供一位数组和较少的功能，而<code>numpy.array</code>和它有很大的差别的，不能混淆。下面是<code>ndarray</code>的几个比较重要的属性：<br><strong>ndarray.ndim</strong><br>　　数组的维度个数。在Python世界里，维度的数量被称为rank。<br><strong>ndarray.shape</strong><br>　　数组的维度。这是一个表示每个维度数组大小的元组，对于一个有n行m列的矩阵, shape是(n,m)。shape元组的长度是rank，或者说维度的个数ndim。<br><strong>ndarray.size</strong><br>　　数组中元素的数量，和shape元素的数量相等。<br><strong>ndarray.dtype</strong><br>　　一个描述数组中元素类型的类。我们可以使用标准的Python类型来指定dtype。另外Numpy也提供了自己的类型。比如<code>numpy.int32</code>, <code>numpy.int16</code>, and <code>numpy.float64</code>。<br><strong>ndarray.itemsize</strong><br>　　数组元素的字节大小。比如<code>float64</code>的<code>itemsize</code>为8 (=64/8), <code>complex32</code>为4 (=32/8)。等于<code>ndarray.dtype.itemsize</code>。<br><strong>ndarray.data</strong><br>　　缓冲区中真实包含的数组元素。一般不会使用这个属性，因为我们使用索引访问数组中的元素。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</div><div class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</div><div class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</div><div class="line">(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.ndim</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype.name</div><div class="line"><span class="string">'int64'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.itemsize</div><div class="line"><span class="number">8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.size</div><div class="line"><span class="number">15</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'numpy.ndarray'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</div><div class="line">&lt;type <span class="string">'numpy.ndarray'</span>&gt;</div></pre></td></tr></table></figure>
<p>##创建数组<br><strong>使用Python的<code>list</code>和<code>tuple</code>来创建，数组的类型从输入的类型推断而来</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype</div><div class="line">dtype(<span class="string">'int64'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">1.2</span>, <span class="number">3.5</span>, <span class="number">5.1</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.dtype</div><div class="line">dtype(<span class="string">'float64'</span>)</div></pre></td></tr></table></figure>
<p>数组将序列的序列转换为二维数组,序列的序列的序列三维数组,等等。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([(<span class="number">1.5</span>,<span class="number">2</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([[ <span class="number">1.5</span>,  <span class="number">2.</span> ,  <span class="number">3.</span> ],</div><div class="line">       [ <span class="number">4.</span> ,  <span class="number">5.</span> ,  <span class="number">6.</span> ]])</div></pre></td></tr></table></figure></p>
<p>数组的类型也可以在创建的时候指定<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.array( [ [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>] ], dtype=complex )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">array([[ <span class="number">1.</span>+<span class="number">0.j</span>,  <span class="number">2.</span>+<span class="number">0.j</span>],</div><div class="line">       [ <span class="number">3.</span>+<span class="number">0.j</span>,  <span class="number">4.</span>+<span class="number">0.j</span>]])</div></pre></td></tr></table></figure></p>
<p>通常一个数组的元素是未知的，但是它的大小是已知的。因此Numpy提供了几个创建通用数组的函数，减少了创建常见数组的麻烦。这些数组的默认类型是<code>float64</code>。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros( (<span class="number">3</span>,<span class="number">4</span>) )</div><div class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.ones( (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), dtype=np.int16 )                <span class="comment"># 可以指定类型</span></div><div class="line">array([[[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">        [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">        [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]],</div><div class="line">       [[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">        [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">        [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]], dtype=int16)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.empty( (<span class="number">2</span>,<span class="number">3</span>) )                                 <span class="comment"># 未初始化的，输出可能多种多样</span></div><div class="line">array([[  <span class="number">3.73603959e-262</span>,   <span class="number">6.02658058e-154</span>,   <span class="number">6.55490914e-260</span>],</div><div class="line">       [  <span class="number">5.30498948e-313</span>,   <span class="number">3.14673309e-307</span>,   <span class="number">1.00000000e+000</span>]])</div></pre></td></tr></table></figure></p>
<p>要创建数字序列，NumPy提供了用于生成一定数字范围的数组的函数。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.arange( <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span> )</div><div class="line">array([<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.arange( <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.3</span> )                 <span class="comment"># 也接受浮点型参数</span></div><div class="line">array([ <span class="number">0.</span> ,  <span class="number">0.3</span>,  <span class="number">0.6</span>,  <span class="number">0.9</span>,  <span class="number">1.2</span>,  <span class="number">1.5</span>,  <span class="number">1.8</span>])</div></pre></td></tr></table></figure></p>
<p><code>arange</code>传入浮点参数时我们不能预测到实际获得的元素的个数<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> numpy <span class="keyword">import</span> pi</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.linspace( <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span> )                 <span class="comment"># 范围0到2的9个元素</span></div><div class="line">array([ <span class="number">0.</span>  ,  <span class="number">0.25</span>,  <span class="number">0.5</span> ,  <span class="number">0.75</span>,  <span class="number">1.</span>  ,  <span class="number">1.25</span>,  <span class="number">1.5</span> ,  <span class="number">1.75</span>,  <span class="number">2.</span>  ])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.linspace( <span class="number">0</span>, <span class="number">2</span>*pi, <span class="number">10</span> )        <span class="comment"># 这对于要精确获取点的个数很有用</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.sin(x)</div><div class="line">array([  <span class="number">0.00000000e+00</span>,   <span class="number">6.42787610e-01</span>,   <span class="number">9.84807753e-01</span>,</div><div class="line">         <span class="number">8.66025404e-01</span>,   <span class="number">3.42020143e-01</span>,  <span class="number">-3.42020143e-01</span>,</div><div class="line">        <span class="number">-8.66025404e-01</span>,  <span class="number">-9.84807753e-01</span>,  <span class="number">-6.42787610e-01</span>,</div><div class="line">        <span class="number">-2.44929360e-16</span>])</div></pre></td></tr></table></figure></p>
<p>其它很多现成的函数可以查看：</p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.array.html#numpy.array" target="_blank" rel="external">array</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.zeros.html#numpy.zeros" target="_blank" rel="external">zeros</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.zeros_like.html#numpy.zeros_like" target="_blank" rel="external">zeros_like</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ones.html#numpy.ones" target="_blank" rel="external">ones</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ones_like.html#numpy.ones_like" target="_blank" rel="external">ones_like</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.empty.html#numpy.empty" target="_blank" rel="external">empty</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.empty_like.html#numpy.empty_like" target="_blank" rel="external">empty_like</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.arange.html#numpy.arange" target="_blank" rel="external">arange</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.linspace.html#numpy.linspace" target="_blank" rel="external">linspace</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.rand.html#numpy.random.rand" target="_blank" rel="external">numpy.random.rand</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.randn.html#numpy.random.randn" target="_blank" rel="external">numpy.random.randn</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.fromfunction.html#numpy.fromfunction" target="_blank" rel="external">fromfunction</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.fromfile.html#numpy.fromfile" target="_blank" rel="external">fromfile</a></p>
</blockquote>
<p>##基本操作<br>数组的数学操作是元素级的，并且会创建新的结果数组<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array( [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.arange( <span class="number">4</span> )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = a-b <span class="comment"># 数组相减，各个元素分别相减</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">array([<span class="number">20</span>, <span class="number">29</span>, <span class="number">38</span>, <span class="number">47</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b**<span class="number">2</span> <span class="comment"># 分别计算平方</span></div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>*np.sin(a)</div><div class="line">array([ <span class="number">9.12945251</span>, <span class="number">-9.88031624</span>,  <span class="number">7.4511316</span> , <span class="number">-2.62374854</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a&lt;<span class="number">35</span></div><div class="line">array([ <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], dtype=bool)</div></pre></td></tr></table></figure></p>
<p>NumPy中数组相乘A*B还是元素级的，矩阵相乘使用<code>dot</code>函数：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>A = np.array( [[<span class="number">1</span>,<span class="number">1</span>],</div><div class="line"><span class="meta">... </span>            [<span class="number">0</span>,<span class="number">1</span>]] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = np.array( [[<span class="number">2</span>,<span class="number">0</span>],</div><div class="line"><span class="meta">... </span>            [<span class="number">3</span>,<span class="number">4</span>]] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A*B                         <span class="comment"># elementwise product</span></div><div class="line">array([[<span class="number">2</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">4</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.dot(B)                    <span class="comment"># matrix product</span></div><div class="line">array([[<span class="number">5</span>, <span class="number">4</span>],</div><div class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.dot(A, B)                <span class="comment"># another matrix product</span></div><div class="line">array([[<span class="number">5</span>, <span class="number">4</span>],</div><div class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</div></pre></td></tr></table></figure></p>
<p>有些操作实在原有数组上做修改而不会创建新的数组，比如<code>+=</code>,<code>*=</code><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.ones((<span class="number">2</span>,<span class="number">3</span>), dtype=int)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.random.random((<span class="number">2</span>,<span class="number">3</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</div><div class="line">       [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b += a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([[ <span class="number">3.417022</span>  ,  <span class="number">3.72032449</span>,  <span class="number">3.00011437</span>],</div><div class="line">       [ <span class="number">3.30233257</span>,  <span class="number">3.14675589</span>,  <span class="number">3.09233859</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a += b                  <span class="comment"># b不会自动转成整形</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">TypeError: Cannot cast ufunc add output <span class="keyword">from</span> dtype(<span class="string">'float64'</span>) to dtype(<span class="string">'int64'</span>) <span class="keyword">with</span> casting rule <span class="string">'same_kind'</span></div></pre></td></tr></table></figure></p>
<p>操作不同类型的数组，生成的数组类型对应于更精确的类型<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.ones(<span class="number">3</span>, dtype=np.int32)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.linspace(<span class="number">0</span>,pi,<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.dtype.name</div><div class="line"><span class="string">'float64'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = a+b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">array([ <span class="number">1.</span>        ,  <span class="number">2.57079633</span>,  <span class="number">4.14159265</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.dtype.name</div><div class="line"><span class="string">'float64'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = np.exp(c*<span class="number">1j</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">array([ <span class="number">0.54030231</span>+<span class="number">0.84147098j</span>, <span class="number">-0.84147098</span>+<span class="number">0.54030231j</span>,</div><div class="line">       <span class="number">-0.54030231</span><span class="number">-0.84147098j</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.dtype.name</div><div class="line"><span class="string">'complex128'</span></div></pre></td></tr></table></figure></p>
<p><code>ndarray</code>提供了很多一元操作，比如<code>sum</code>,<code>min</code>,<code>max</code><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.random((<span class="number">2</span>,<span class="number">3</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">0.18626021</span>,  <span class="number">0.34556073</span>,  <span class="number">0.39676747</span>],</div><div class="line">       [ <span class="number">0.53881673</span>,  <span class="number">0.41919451</span>,  <span class="number">0.6852195</span> ]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.sum()</div><div class="line"><span class="number">2.5718191614547998</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.min()</div><div class="line"><span class="number">0.1862602113776709</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.max()</div><div class="line"><span class="number">0.6852195003967595</span></div></pre></td></tr></table></figure></p>
<p>NumPy提供一些通用函数，比如<code>sin</code>,<code>cos</code>,<code>exp</code>，被称为<code>ufunc</code>，这些函数的操作都是元素级的，会产生新的数组。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>B = np.arange(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B</div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(B)</div><div class="line">array([ <span class="number">1.</span>        ,  <span class="number">2.71828183</span>,  <span class="number">7.3890561</span> ])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.sqrt(B)</div><div class="line">array([ <span class="number">0.</span>        ,  <span class="number">1.</span>        ,  <span class="number">1.41421356</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>C = np.array([<span class="number">2.</span>, <span class="number">-1.</span>, <span class="number">4.</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.add(B, C)</div><div class="line">array([ <span class="number">2.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>])</div></pre></td></tr></table></figure></p>
<p>其它还有：</p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.all.html#numpy.all" target="_blank" rel="external">all</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.any.html#numpy.any" target="_blank" rel="external">any</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis" target="_blank" rel="external">apply_along_axis</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.argmax.html#numpy.argmax" target="_blank" rel="external">argmax</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.argmin.html#numpy.argmin" target="_blank" rel="external">argmin</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.argsort.html#numpy.argsort" target="_blank" rel="external">argsort</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.average.html#numpy.average" target="_blank" rel="external">average</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.bincount.html#numpy.bincount" target="_blank" rel="external">bincount</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ceil.html#numpy.ceil" target="_blank" rel="external">ceil</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.clip.html#numpy.clip" target="_blank" rel="external">clip</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.conj.html#numpy.conj" target="_blank" rel="external">conj</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.corrcoef.html#numpy.corrcoef" target="_blank" rel="external">corrcoef</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cov.html#numpy.cov" target="_blank" rel="external">cov</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cross.html#numpy.cross" target="_blank" rel="external">cross</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cumprod.html#numpy.cumprod" target="_blank" rel="external">cumprod</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cumsum.html#numpy.cumsum" target="_blank" rel="external">cumsum</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.diff.html#numpy.diff" target="_blank" rel="external">diff</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.dot.html#numpy.dot" target="_blank" rel="external">dot</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.floor.html#numpy.floor" target="_blank" rel="external">floor</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.inner.html#numpy.inner" target="_blank" rel="external">inner</a>,<a href="">inv</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.lexsort.html#numpy.lexsort" target="_blank" rel="external">lexsort</a>,<a href="http://docs.python.org/dev/library/functions.html#max" target="_blank" rel="external">max</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.maximum.html#numpy.maximum" target="_blank" rel="external">maximum</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.mean.html#numpy.mean" target="_blank" rel="external">mean</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.median.html#numpy.median" target="_blank" rel="external">median</a>,<a href="http://docs.python.org/dev/library/functions.html#min" target="_blank" rel="external">min</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.minimum.html#numpy.minimum" target="_blank" rel="external">minimum</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nonzero.html#numpy.nonzero" target="_blank" rel="external">nonzero</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.outer.html#numpy.outer" target="_blank" rel="external">outer</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.prod.html#numpy.prod" target="_blank" rel="external">prod</a>,<a href="http://docs.python.org/dev/library/re.html#module-re" target="_blank" rel="external">re</a>,<a href="http://docs.python.org/dev/library/functions.html#round" target="_blank" rel="external">round</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.sort.html#numpy.sort" target="_blank" rel="external">sort</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.std.html#numpy.std" target="_blank" rel="external">std</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.sum.html#numpy.sum" target="_blank" rel="external">sum</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.trace.html#numpy.trace" target="_blank" rel="external">trace</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.transpose.html#numpy.transpose" target="_blank" rel="external">transpose</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.var.html#numpy.var" target="_blank" rel="external">var</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.vdot.html#numpy.vdot" target="_blank" rel="external">vdot</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.vectorize.html#numpy.vectorize" target="_blank" rel="external">vectorize</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.where.html#numpy.where" target="_blank" rel="external">where</a></p>
</blockquote>
<p>##索引(Indexing)、切片(Slicing)、迭代(Iterating)<br>就像<code>lists</code>，一位数组可以被索引、切片、迭代。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">10</span>)**<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([  <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">8</span>,  <span class="number">27</span>,  <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>]</div><div class="line"><span class="number">8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>]</div><div class="line">array([ <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">6</span>:<span class="number">2</span>] = <span class="number">-1000</span>    <span class="comment"># 等同于 a[0:6:2] = -1000; 从索引0开始到6，偶数位置设为-1000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([<span class="number">-1000</span>,     <span class="number">1</span>, <span class="number">-1000</span>,    <span class="number">27</span>, <span class="number">-1000</span>,   <span class="number">125</span>,   <span class="number">216</span>,   <span class="number">343</span>,   <span class="number">512</span>,   <span class="number">729</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[ : :<span class="number">-1</span>]                                 <span class="comment"># 将数组逆序</span></div><div class="line">array([  <span class="number">729</span>,   <span class="number">512</span>,   <span class="number">343</span>,   <span class="number">216</span>,   <span class="number">125</span>, <span class="number">-1000</span>,    <span class="number">27</span>, <span class="number">-1000</span>,     <span class="number">1</span>, <span class="number">-1000</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line"><span class="meta">... </span>    print(i**(<span class="number">1</span>/<span class="number">3.</span>))</div><div class="line">...</div><div class="line">nan</div><div class="line"><span class="number">1.0</span></div><div class="line">nan</div><div class="line"><span class="number">3.0</span></div><div class="line">nan</div><div class="line"><span class="number">5.0</span></div><div class="line"><span class="number">6.0</span></div><div class="line"><span class="number">7.0</span></div><div class="line"><span class="number">8.0</span></div><div class="line"><span class="number">9.0</span></div></pre></td></tr></table></figure></p>
<p>多维数组每个轴有一个索引，可以通过元组传入各维度的索引来定制<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">10</span>*x+y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.fromfunction(f,(<span class="number">5</span>,<span class="number">4</span>),dtype=int)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</div><div class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</div><div class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</div><div class="line">       [<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>],</div><div class="line">       [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="number">23</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">0</span>:<span class="number">5</span>, <span class="number">1</span>]                       <span class="comment"># 第二列的每一行</span></div><div class="line">array([ <span class="number">1</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span>, <span class="number">41</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b[ : ,<span class="number">1</span>]                        </div><div class="line">array([ <span class="number">1</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span>, <span class="number">41</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">1</span>:<span class="number">3</span>, : ]                      <span class="comment"># 第二行到第三行，注意从2开始</span></div><div class="line">array([[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</div><div class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</div></pre></td></tr></table></figure></p>
<p>当传入的索引个数比维度小，没有传入的获取完成的片<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">-1</span>]                                  <span class="comment"># 最后一行，等同于 b[-1,:]</span></div><div class="line">array([<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>])</div></pre></td></tr></table></figure></p>
<p>用<code>...</code>表示所有片<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.array( [[[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],               <span class="comment"># 三维数组 (堆叠两个二维数组)</span></div><div class="line"><span class="meta">... </span>                [ <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>]],</div><div class="line"><span class="meta">... </span>               [[<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>],</div><div class="line"><span class="meta">... </span>                [<span class="number">110</span>,<span class="number">112</span>,<span class="number">113</span>]]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.shape</div><div class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="number">1</span>,...]                                   <span class="comment"># c[1,:,:] or c[1]</span></div><div class="line">array([[<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>],</div><div class="line">       [<span class="number">110</span>, <span class="number">112</span>, <span class="number">113</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c[...,<span class="number">2</span>]                                   <span class="comment"># c[:,:,2]</span></div><div class="line">array([[  <span class="number">2</span>,  <span class="number">13</span>],</div><div class="line">       [<span class="number">102</span>, <span class="number">113</span>]])</div></pre></td></tr></table></figure></p>
<p>多维数组第一个轴的遍历：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> b:</div><div class="line"><span class="meta">... </span>    print(row)</div><div class="line">...</div><div class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</div><div class="line">[<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</div><div class="line">[<span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span>]</div><div class="line">[<span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span>]</div></pre></td></tr></table></figure></p>
<p>数组扁平化成一维：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> element <span class="keyword">in</span> b.flat:</div><div class="line"><span class="meta">... </span>    print(element)</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">11</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>其它还有：</p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/user/basics.indexing.html#basics-indexing" target="_blank" rel="external">Indexing</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#arrays-indexing" target="_blank" rel="external">Indexing</a> (reference), <a href="https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#numpy.newaxis" target="_blank" rel="external">newaxis</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ndenumerate.html#numpy.ndenumerate" target="_blank" rel="external">ndenumerate</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.indices.html#numpy.indices" target="_blank" rel="external">indices</a></p>
</blockquote>
<p>##Shape操作<br><strong>改变数组的shape</strong><br>获得数组轴的数量<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>,<span class="number">4</span>)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">2.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>],</div><div class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>,  <span class="number">3.</span>,  <span class="number">6.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>可以通过很多种方式改变数组的shape<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.ravel() <span class="comment"># 扁平数组</span></div><div class="line">array([ <span class="number">2.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>,  <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">8.</span>,  <span class="number">9.</span>,  <span class="number">3.</span>,  <span class="number">6.</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape = (<span class="number">6</span>, <span class="number">2</span>) <span class="comment"># 改变数组shape</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.T <span class="comment"># 矩阵转置</span></div><div class="line">array([[ <span class="number">2.</span>,  <span class="number">0.</span>,  <span class="number">4.</span>,  <span class="number">1.</span>,  <span class="number">8.</span>,  <span class="number">3.</span>],</div><div class="line">       [ <span class="number">8.</span>,  <span class="number">6.</span>,  <span class="number">5.</span>,  <span class="number">1.</span>,  <span class="number">9.</span>,  <span class="number">6.</span>]])</div></pre></td></tr></table></figure></p>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.reshape.html#numpy.reshape" target="_blank" rel="external">reshape</a>函数返回一个新的数组，而<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ndarray.resize.html#numpy.ndarray.resize" target="_blank" rel="external">resize</a>是改变自身。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">2.</span>,  <span class="number">8.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">6.</span>],</div><div class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>],</div><div class="line">       [ <span class="number">3.</span>,  <span class="number">6.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.resize((<span class="number">2</span>,<span class="number">6</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">2.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>,  <span class="number">4.</span>,  <span class="number">5.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">8.</span>,  <span class="number">9.</span>,  <span class="number">3.</span>,  <span class="number">6.</span>]])</div></pre></td></tr></table></figure></p>
<p>如果一个维度是-1，则其它维度自动计算<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.reshape(<span class="number">3</span>,<span class="number">-1</span>)</div><div class="line">array([[ <span class="number">2.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>],</div><div class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>,  <span class="number">3.</span>,  <span class="number">6.</span>]])</div></pre></td></tr></table></figure></p>
<p>其它还有：</p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape" target="_blank" rel="external">ndarray.shape</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.reshape.html#numpy.reshape" target="_blank" rel="external">reshape</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.resize.html#numpy.resize" target="_blank" rel="external">resize</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ravel.html#numpy.ravel" target="_blank" rel="external">ravel</a></p>
</blockquote>
<p><strong>数组叠加</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">8.</span>,  <span class="number">8.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">8.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">4.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.vstack((a,b))</div><div class="line">array([[ <span class="number">8.</span>,  <span class="number">8.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">8.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">4.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.hstack((a,b))</div><div class="line">array([[ <span class="number">8.</span>,  <span class="number">8.</span>,  <span class="number">1.</span>,  <span class="number">8.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">4.</span>]])</div></pre></td></tr></table></figure></p>
<p><strong>将数组切为多个小数组</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">12</span>)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">9.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">3.</span>,  <span class="number">6.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">7.</span>,  <span class="number">9.</span>,  <span class="number">7.</span>,  <span class="number">2.</span>,  <span class="number">7.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">9.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">0.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.hsplit(a,<span class="number">3</span>)   <span class="comment"># Split a into 3</span></div><div class="line">[array([[ <span class="number">9.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">3.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">9.</span>,  <span class="number">2.</span>]]), array([[ <span class="number">6.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">7.</span>],</div><div class="line">       [ <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>]]), array([[ <span class="number">9.</span>,  <span class="number">7.</span>,  <span class="number">2.</span>,  <span class="number">7.</span>],</div><div class="line">       [ <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">0.</span>]])]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.hsplit(a,(<span class="number">3</span>,<span class="number">4</span>))   <span class="comment"># Split a after the third and the fourth column</span></div><div class="line">[array([[ <span class="number">9.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">9.</span>]]), array([[ <span class="number">3.</span>],</div><div class="line">       [ <span class="number">2.</span>]]), array([[ <span class="number">6.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">7.</span>,  <span class="number">9.</span>,  <span class="number">7.</span>,  <span class="number">2.</span>,  <span class="number">7.</span>],</div><div class="line">       [ <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">6.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">0.</span>]])]</div></pre></td></tr></table></figure></p>
<p>##拷贝和视图<br><strong>没拷贝的</strong><br>简单的赋值没有拷贝数组的元素<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = a            <span class="comment"># no new object is created</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a           <span class="comment"># a and b are two names for the same ndarray object</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape = <span class="number">3</span>,<span class="number">4</span>    <span class="comment"># changes the shape of a</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>Python对可变对象传递的都是引用，所以函数调用不会拷贝<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    print(id(x))</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)                           <span class="comment"># id 函数获取对象的唯一标识</span></div><div class="line"><span class="number">148293216</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(a)</div><div class="line"><span class="number">148293216</span></div></pre></td></tr></table></figure></p>
<p><strong>视图和浅拷贝</strong><br>不同的数组对象可以共享相同的数据。视图方法创建一个新的数组对象,但是是相同的数据。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.view()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> a</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.base <span class="keyword">is</span> a                        <span class="comment"># c 是a的数据的视图</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.flags.owndata</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.shape = <span class="number">2</span>,<span class="number">6</span>                      <span class="comment"># a维度没有改变</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</div><div class="line">(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="number">0</span>,<span class="number">4</span>] = <span class="number">1234</span>                      <span class="comment"># a的数据变了</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[   <span class="number">0</span>,    <span class="number">1</span>,    <span class="number">2</span>,    <span class="number">3</span>],</div><div class="line">       [<span class="number">1234</span>,    <span class="number">5</span>,    <span class="number">6</span>,    <span class="number">7</span>],</div><div class="line">       [   <span class="number">8</span>,    <span class="number">9</span>,   <span class="number">10</span>,   <span class="number">11</span>]])</div></pre></td></tr></table></figure></p>
<p>切片也是返回一个视图<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = a[ : , <span class="number">1</span>:<span class="number">3</span>]     <span class="comment"># spaces added for clarity; could also be written "s = a[:,1:3]"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[:] = <span class="number">10</span>           <span class="comment"># s[:] is a view of s. Note the difference between s=10 and s[:]=10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[   <span class="number">0</span>,   <span class="number">10</span>,   <span class="number">10</span>,    <span class="number">3</span>],</div><div class="line">       [<span class="number">1234</span>,   <span class="number">10</span>,   <span class="number">10</span>,    <span class="number">7</span>],</div><div class="line">       [   <span class="number">8</span>,   <span class="number">10</span>,   <span class="number">10</span>,   <span class="number">11</span>]])</div></pre></td></tr></table></figure></p>
<p><strong>深拷贝</strong><br><code>copy</code>方法可以完整复制数组的数据<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = a.copy()                          <span class="comment"># 由a的数据创建的新数组</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d <span class="keyword">is</span> a</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.base <span class="keyword">is</span> a                           <span class="comment"># d 没有共享 a的任何东西</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">9999</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[   <span class="number">0</span>,   <span class="number">10</span>,   <span class="number">10</span>,    <span class="number">3</span>],</div><div class="line">       [<span class="number">1234</span>,   <span class="number">10</span>,   <span class="number">10</span>,    <span class="number">7</span>],</div><div class="line">       [   <span class="number">8</span>,   <span class="number">10</span>,   <span class="number">10</span>,   <span class="number">11</span>]])</div></pre></td></tr></table></figure></p>
<p>##方法概述<br>这里有一些有用的NumPy函数和方法，<a href="https://docs.scipy.org/doc/numpy-dev/reference/routines.html#routines" target="_blank" rel="external">Routines</a>是完成的函数列表。<br><strong>数组创建</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.arange.html#numpy.arange" target="_blank" rel="external">arange</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.array.html#numpy.array" target="_blank" rel="external">array</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.copy.html#numpy.copy" target="_blank" rel="external">copy</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.empty.html#numpy.empty" target="_blank" rel="external">empty</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.empty_like.html#numpy.empty_like" target="_blank" rel="external">empty_like</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.eye.html#numpy.eye" target="_blank" rel="external">eye</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.fromfile.html#numpy.fromfile" target="_blank" rel="external">fromfile</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.fromfunction.html#numpy.fromfunction" target="_blank" rel="external">fromfunction</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.identity.html#numpy.identity" target="_blank" rel="external">identity</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.linspace.html#numpy.linspace" target="_blank" rel="external">linspace</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.logspace.html#numpy.logspace" target="_blank" rel="external">logspace</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.mgrid.html#numpy.mgrid" target="_blank" rel="external">mgrid</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ogrid.html#numpy.ogrid" target="_blank" rel="external">ogrid</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ones.html#numpy.ones" target="_blank" rel="external">ones</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ones_like.html#numpy.ones_like" target="_blank" rel="external">ones_like</a>,<a href="">r</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.zeros.html#numpy.zeros" target="_blank" rel="external">zeros</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.zeros_like.html#numpy.zeros_like" target="_blank" rel="external">zeros_like</a></p>
</blockquote>
<p><strong>转换</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ndarray.astype.html#numpy.ndarray.astype" target="_blank" rel="external">ndarray.astype</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.atleast_1d.html#numpy.atleast_1d" target="_blank" rel="external">atleast_1d</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.atleast_2d.html#numpy.atleast_2d" target="_blank" rel="external">atleast_2d</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.atleast_3d.html#numpy.atleast_3d" target="_blank" rel="external">atleast_3d</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.mat.html#numpy.mat" target="_blank" rel="external">mat</a></p>
</blockquote>
<p><strong>处理</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.array_split.html#numpy.array_split" target="_blank" rel="external">array_split</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.column_stack.html#numpy.column_stack" target="_blank" rel="external">column_stack</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.concatenate.html#numpy.concatenate" target="_blank" rel="external">concatenate</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.diagonal.html#numpy.diagonal" target="_blank" rel="external">diagonal</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.dsplit.html#numpy.dsplit" target="_blank" rel="external">dsplit</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.dstack.html#numpy.dstack" target="_blank" rel="external">dstack</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.hsplit.html#numpy.hsplit" target="_blank" rel="external">hsplit</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.hstack.html#numpy.hstack" target="_blank" rel="external">hstack</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ndarray.item.html#numpy.ndarray.item" target="_blank" rel="external">ndarray.item</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#numpy.newaxis" target="_blank" rel="external">newaxis</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ravel.html#numpy.ravel" target="_blank" rel="external">ravel</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.repeat.html#numpy.repeat" target="_blank" rel="external">repeat</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.reshape.html#numpy.reshape" target="_blank" rel="external">reshape</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.resize.html#numpy.resize" target="_blank" rel="external">resize</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.squeeze.html#numpy.squeeze" target="_blank" rel="external">squeeze</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.swapaxes.html#numpy.swapaxes" target="_blank" rel="external">swapaxes</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.take.html#numpy.take" target="_blank" rel="external">take</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.transpose.html#numpy.transpose" target="_blank" rel="external">transpose</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.vsplit.html#numpy.vsplit" target="_blank" rel="external">vsplit</a>,<a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.vstack.html#numpy.vstack" target="_blank" rel="external">vstack</a></p>
</blockquote>
<p><strong>Questions</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.all.html#numpy.all" target="_blank" rel="external">all</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.any.html#numpy.any" target="_blank" rel="external">any</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.nonzero.html#numpy.nonzero" target="_blank" rel="external">nonzero</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.where.html#numpy.where" target="_blank" rel="external">where</a></p>
</blockquote>
<p><strong>排序</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.argmax.html#numpy.argmax" target="_blank" rel="external">argmax</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.argmin.html#numpy.argmin" target="_blank" rel="external">argmin</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.argsort.html#numpy.argsort" target="_blank" rel="external">argsort</a>, <a href="http://docs.python.org/dev/library/functions.html#max" target="_blank" rel="external">max</a>, <a href="http://docs.python.org/dev/library/functions.html#min" target="_blank" rel="external">min</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ptp.html#numpy.ptp" target="_blank" rel="external">ptp</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.searchsorted.html#numpy.searchsorted" target="_blank" rel="external">searchsorted</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.sort.html#numpy.sort" target="_blank" rel="external">sort</a></p>
</blockquote>
<p><strong>操作</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.choose.html#numpy.choose" target="_blank" rel="external">choose</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.compress.html#numpy.compress" target="_blank" rel="external">compress</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cumprod.html#numpy.cumprod" target="_blank" rel="external">cumprod</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cumsum.html#numpy.cumsum" target="_blank" rel="external">cumsum</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.inner.html#numpy.inner" target="_blank" rel="external">inner</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.ndarray.fill.html#numpy.ndarray.fill" target="_blank" rel="external">ndarray.fill</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.imag.html#numpy.imag" target="_blank" rel="external">imag</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.prod.html#numpy.prod" target="_blank" rel="external">prod</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.put.html#numpy.put" target="_blank" rel="external">put</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.putmask.html#numpy.putmask" target="_blank" rel="external">putmask</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.real.html#numpy.real" target="_blank" rel="external">real</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.sum.html#numpy.sum" target="_blank" rel="external">sum</a></p>
</blockquote>
<p><strong>基本数据分析</strong></p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cov.html#numpy.cov" target="_blank" rel="external">cov</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.mean.html#numpy.mean" target="_blank" rel="external">mean</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.std.html#numpy.std" target="_blank" rel="external">std</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.var.html#numpy.var" target="_blank" rel="external">var</a></p>
</blockquote>
<p><strong>基本线性代数</strong><br><a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.cross.html#numpy.cross" target="_blank" rel="external">cross</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.dot.html#numpy.dot" target="_blank" rel="external">dot</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.outer.html#numpy.outer" target="_blank" rel="external">outer</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd" target="_blank" rel="external">linalg.svd</a>, <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.vdot.html#numpy.vdot" target="_blank" rel="external">vdot</a></p>
<p>##Less Basic<br><strong>广播规则</strong><br>Broadcasting allows universal functions to deal in a meaningful way with inputs that do not have exactly the same shape.</p>
<p>The first rule of broadcasting is that if all input arrays do not have the same number of dimensions, a “1” will be repeatedly prepended to the shapes of the smaller arrays until all the arrays have the same number of dimensions.</p>
<p>The second rule of broadcasting ensures that arrays with a size of 1 along a particular dimension act as if they had the size of the array with the largest shape along that dimension. The value of the array element is assumed to be the same along that dimension for the “broadcast” array.</p>
<p>After application of the broadcasting rules, the sizes of all arrays must match. More details can be found in <a href="https://docs.scipy.org/doc/numpy-dev/user/basics.broadcasting.html" target="_blank" rel="external">Broadcasting</a>.</p>
<p><strong>各种的索引和索引技巧</strong><br>NumPy比常规的Python序列提供更多的索引方法，除了整数索引和切片，整数数组可以索引数组和数组的布尔值。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>)**<span class="number">2</span>                       </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>i = np.array( [ <span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span> ] )              <span class="comment"># 下标数组</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[i]                                       <span class="comment"># 位置i处的元素</span></div><div class="line">array([ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">9</span>, <span class="number">64</span>, <span class="number">25</span>])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>j = np.array( [ [ <span class="number">3</span>, <span class="number">4</span>], [ <span class="number">9</span>, <span class="number">7</span> ] ] )      <span class="comment"># 二维数组的索引</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[j]                                       <span class="comment"># 和j同样的shape</span></div><div class="line">array([[ <span class="number">9</span>, <span class="number">16</span>],</div><div class="line">       [<span class="number">81</span>, <span class="number">49</span>]])</div></pre></td></tr></table></figure></p>
<p>当索引数组是多维的,索引数组元素取得都是第一个维度。[[0],[1],[2]]<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>palette = np.array( [ [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],                <span class="comment"># black</span></div><div class="line"><span class="meta">... </span>                      [<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>],              <span class="comment"># red</span></div><div class="line"><span class="meta">... </span>                      [<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>],              <span class="comment"># green</span></div><div class="line"><span class="meta">... </span>                      [<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>],              <span class="comment"># blue</span></div><div class="line"><span class="meta">... </span>                      [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>] ] )       <span class="comment"># white</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>image = np.array( [ [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span> ],           <span class="comment"># 每个值对应调色板的一个颜色</span></div><div class="line"><span class="meta">... </span>                    [ <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span> ]  ] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>palette[image]                            <span class="comment"># the (2,4,3) color image</span></div><div class="line">array([[[  <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>],</div><div class="line">        [<span class="number">255</span>,   <span class="number">0</span>,   <span class="number">0</span>],</div><div class="line">        [  <span class="number">0</span>, <span class="number">255</span>,   <span class="number">0</span>],</div><div class="line">        [  <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>]],</div><div class="line">       [[  <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>],</div><div class="line">        [  <span class="number">0</span>,   <span class="number">0</span>, <span class="number">255</span>],</div><div class="line">        [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</div><div class="line">        [  <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>]]])</div></pre></td></tr></table></figure></p>
<p>也可以给出多维下标，存放下标的数组必须有相同的维度<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</div><div class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</div><div class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>i = np.array( [ [<span class="number">0</span>,<span class="number">1</span>],                        <span class="comment"># indices for the first dim of a</span></div><div class="line"><span class="meta">... </span>                [<span class="number">1</span>,<span class="number">2</span>] ] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>j = np.array( [ [<span class="number">2</span>,<span class="number">1</span>],                        <span class="comment"># indices for the second dim</span></div><div class="line"><span class="meta">... </span>                [<span class="number">3</span>,<span class="number">3</span>] ] )</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[i,j]                                     <span class="comment"># i and j must have equal shape</span></div><div class="line">array([[ <span class="number">2</span>,  <span class="number">5</span>],</div><div class="line">       [ <span class="number">7</span>, <span class="number">11</span>]])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[i,<span class="number">2</span>]</div><div class="line">array([[ <span class="number">2</span>,  <span class="number">6</span>],</div><div class="line">       [ <span class="number">6</span>, <span class="number">10</span>]])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,j]                                     <span class="comment"># i.e., a[ : , j]</span></div><div class="line">array([[[ <span class="number">2</span>,  <span class="number">1</span>],</div><div class="line">        [ <span class="number">3</span>,  <span class="number">3</span>]],</div><div class="line">       [[ <span class="number">6</span>,  <span class="number">5</span>],</div><div class="line">        [ <span class="number">7</span>,  <span class="number">7</span>]],</div><div class="line">       [[<span class="number">10</span>,  <span class="number">9</span>],</div><div class="line">        [<span class="number">11</span>, <span class="number">11</span>]]])</div></pre></td></tr></table></figure></p>
<p>Naturally, we can put i and j in a sequence (say a list) and then do the indexing with the list.<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [i,j]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[l]                                       <span class="comment"># equivalent to a[i,j]</span></div><div class="line">array([[ <span class="number">2</span>,  <span class="number">5</span>],</div><div class="line">       [ <span class="number">7</span>, <span class="number">11</span>]])</div></pre></td></tr></table></figure></p>
<p>However, we can not do this by putting i and j into an array, because this array will be interpreted as indexing the first dimension of a.<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = np.array( [i,j] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[s]                                       <span class="comment"># not what we want</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in ?</div><div class="line">IndexError: index (<span class="number">3</span>) out of range (<span class="number">0</span>&lt;=index&lt;=<span class="number">2</span>) <span class="keyword">in</span> dimension <span class="number">0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[tuple(s)]                                <span class="comment"># same as a[i,j]</span></div><div class="line">array([[ <span class="number">2</span>,  <span class="number">5</span>],</div><div class="line">       [ <span class="number">7</span>, <span class="number">11</span>]])</div></pre></td></tr></table></figure></p>
<p>Another common use of indexing with arrays is the search of the maximum value of time-dependent series :<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>time = np.linspace(<span class="number">20</span>, <span class="number">145</span>, <span class="number">5</span>)                 <span class="comment"># time scale</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.sin(np.arange(<span class="number">20</span>)).reshape(<span class="number">5</span>,<span class="number">4</span>)      <span class="comment"># 4 time-dependent series</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time</div><div class="line">array([  <span class="number">20.</span>  ,   <span class="number">51.25</span>,   <span class="number">82.5</span> ,  <span class="number">113.75</span>,  <span class="number">145.</span>  ])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data</div><div class="line">array([[ <span class="number">0.</span>        ,  <span class="number">0.84147098</span>,  <span class="number">0.90929743</span>,  <span class="number">0.14112001</span>],</div><div class="line">       [<span class="number">-0.7568025</span> , <span class="number">-0.95892427</span>, <span class="number">-0.2794155</span> ,  <span class="number">0.6569866</span> ],</div><div class="line">       [ <span class="number">0.98935825</span>,  <span class="number">0.41211849</span>, <span class="number">-0.54402111</span>, <span class="number">-0.99999021</span>],</div><div class="line">       [<span class="number">-0.53657292</span>,  <span class="number">0.42016704</span>,  <span class="number">0.99060736</span>,  <span class="number">0.65028784</span>],</div><div class="line">       [<span class="number">-0.28790332</span>, <span class="number">-0.96139749</span>, <span class="number">-0.75098725</span>,  <span class="number">0.14987721</span>]])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ind = data.argmax(axis=<span class="number">0</span>)                   <span class="comment"># index of the maxima for each series</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ind</div><div class="line">array([<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time_max = time[ ind]                       <span class="comment"># times corresponding to the maxima</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data_max = data[ind, xrange(data.shape[<span class="number">1</span>])] <span class="comment"># =&gt; data[ind[0],0], data[ind[1],1]...</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time_max</div><div class="line">array([  <span class="number">82.5</span> ,   <span class="number">20.</span>  ,  <span class="number">113.75</span>,   <span class="number">51.25</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data_max</div><div class="line">array([ <span class="number">0.98935825</span>,  <span class="number">0.84147098</span>,  <span class="number">0.99060736</span>,  <span class="number">0.6569866</span> ])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.all(data_max == data.max(axis=<span class="number">0</span>))</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>You can also use indexing with arrays as a target to assign to:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]] = <span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>])</div></pre></td></tr></table></figure></p>
<p>However, when the list of indices contains repetitions, the assignment is done several times, leaving behind the last value:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>]]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure></p>
<p>This is reasonable enough, but watch out if you want to use Python’s += construct, as it may not do what you expect:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>]]+=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure></p>
<p>Even though 0 occurs twice in the list of indices, the 0th element is only incremented once. This is because Python requires “a+=1” to be equivalent to “a=a+1”.</p>
<p><strong>用布尔值做索引</strong><br>When we index arrays with arrays of (integer) indices we are providing the list of indices to pick. With boolean indices the approach is different; we explicitly choose which items in the array we want and which ones we don’t.</p>
<p>The most natural way one can think of for boolean indexing is to use boolean arrays that have the same shape as the original array:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = a &gt; <span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b                                          <span class="comment"># b is a boolean with a's shape</span></div><div class="line">array([[<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>],</div><div class="line">       [<span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>],</div><div class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>]], dtype=bool)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[b]                                       <span class="comment"># 1d array with the selected elements</span></div><div class="line">array([ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</div></pre></td></tr></table></figure></p>
<p>This property can be very useful in assignments:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[b] = <span class="number">0</span>                                   <span class="comment"># All elements of 'a' higher than 4 become 0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">       [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div></pre></td></tr></table></figure></p>
<p>You can look at the following example to see how to use boolean indexing to generate an image of the <a href="http://en.wikipedia.org/wiki/Mandelbrot_set" target="_blank" rel="external">Mandelbrot set</a>:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mandelbrot</span><span class="params">( h,w, maxit=<span class="number">20</span> )</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="string">"""Returns an image of the Mandelbrot fractal of size (h,w)."""</span></div><div class="line"><span class="meta">... </span>    y,x = np.ogrid[ <span class="number">-1.4</span>:<span class="number">1.4</span>:h*<span class="number">1j</span>, <span class="number">-2</span>:<span class="number">0.8</span>:w*<span class="number">1j</span> ]</div><div class="line"><span class="meta">... </span>    c = x+y*<span class="number">1j</span></div><div class="line"><span class="meta">... </span>    z = c</div><div class="line"><span class="meta">... </span>    divtime = maxit + np.zeros(z.shape, dtype=int)</div><div class="line">...</div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(maxit):</div><div class="line"><span class="meta">... </span>        z = z**<span class="number">2</span> + c</div><div class="line"><span class="meta">... </span>        diverge = z*np.conj(z) &gt; <span class="number">2</span>**<span class="number">2</span>            <span class="comment"># who is diverging</span></div><div class="line"><span class="meta">... </span>        div_now = diverge &amp; (divtime==maxit)  <span class="comment"># who is diverging now</span></div><div class="line"><span class="meta">... </span>        divtime[div_now] = i                  <span class="comment"># note when</span></div><div class="line"><span class="meta">... </span>        z[diverge] = <span class="number">2</span>                        <span class="comment"># avoid diverging too much</span></div><div class="line">...</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> divtime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>plt.imshow(mandelbrot(<span class="number">400</span>,<span class="number">400</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://docs.scipy.org/doc/numpy-dev/_images/quickstart-1.png" alt=""><br>The second way of indexing with booleans is more similar to integer indexing; for each dimension of the array we give a 1D boolean array selecting the slices we want.<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b1 = np.array([<span class="keyword">False</span>,<span class="keyword">True</span>,<span class="keyword">True</span>])             <span class="comment"># first dim selection</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b2 = np.array([<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">True</span>,<span class="keyword">False</span>])       <span class="comment"># second dim selection</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[b1,:]                                   <span class="comment"># selecting rows</span></div><div class="line">array([[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</div><div class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[b1]                                     <span class="comment"># same thing</span></div><div class="line">array([[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</div><div class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,b2]                                   <span class="comment"># selecting columns</span></div><div class="line">array([[ <span class="number">0</span>,  <span class="number">2</span>],</div><div class="line">       [ <span class="number">4</span>,  <span class="number">6</span>],</div><div class="line">       [ <span class="number">8</span>, <span class="number">10</span>]])</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[b1,b2]                                  <span class="comment"># a weird thing to do</span></div><div class="line">array([ <span class="number">4</span>, <span class="number">10</span>])</div></pre></td></tr></table></figure></p>
<p>Note that the length of the 1D boolean array must coincide with the length of the dimension (or axis) you want to slice. In the previous example, b1 is a 1-rank array with length 3 (the number of rows in a), and b2 (of length 4) is suitable to index the 2nd rank (columns) of a.</p>
<p><strong>The ix_() function</strong><br>The ix_ function can be used to combine different vectors so as to obtain the result for each n-uplet. For example, if you want to compute all the a+b*c for all the triplets taken from each of the vectors a, b and c:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">8</span>,<span class="number">5</span>,<span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.array([<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ax,bx,cx = np.ix_(a,b,c)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ax</div><div class="line">array([[[<span class="number">2</span>]],</div><div class="line">       [[<span class="number">3</span>]],</div><div class="line">       [[<span class="number">4</span>]],</div><div class="line">       [[<span class="number">5</span>]]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bx</div><div class="line">array([[[<span class="number">8</span>],</div><div class="line">        [<span class="number">5</span>],</div><div class="line">        [<span class="number">4</span>]]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cx</div><div class="line">array([[[<span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>]]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ax.shape, bx.shape, cx.shape</div><div class="line">((<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result = ax+bx*cx</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result</div><div class="line">array([[[<span class="number">42</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">26</span>],</div><div class="line">        [<span class="number">27</span>, <span class="number">22</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">17</span>],</div><div class="line">        [<span class="number">22</span>, <span class="number">18</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">14</span>]],</div><div class="line">       [[<span class="number">43</span>, <span class="number">35</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">27</span>],</div><div class="line">        [<span class="number">28</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">43</span>, <span class="number">18</span>],</div><div class="line">        [<span class="number">23</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">35</span>, <span class="number">15</span>]],</div><div class="line">       [[<span class="number">44</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">68</span>, <span class="number">28</span>],</div><div class="line">        [<span class="number">29</span>, <span class="number">24</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">19</span>],</div><div class="line">        [<span class="number">24</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">36</span>, <span class="number">16</span>]],</div><div class="line">       [[<span class="number">45</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">69</span>, <span class="number">29</span>],</div><div class="line">        [<span class="number">30</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">45</span>, <span class="number">20</span>],</div><div class="line">        [<span class="number">25</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">37</span>, <span class="number">17</span>]]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result[<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</div><div class="line"><span class="number">17</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]+b[<span class="number">2</span>]*c[<span class="number">4</span>]</div><div class="line"><span class="number">17</span></div></pre></td></tr></table></figure></p>
<p>You could also implement the reduce as follows:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">ufunc_reduce</span><span class="params">(ufct, *vectors)</span>:</span></div><div class="line"><span class="meta">... </span>   vs = np.ix_(*vectors)</div><div class="line"><span class="meta">... </span>   r = ufct.identity</div><div class="line"><span class="meta">... </span>   <span class="keyword">for</span> v <span class="keyword">in</span> vs:</div><div class="line"><span class="meta">... </span>       r = ufct(r,v)</div><div class="line"><span class="meta">... </span>   <span class="keyword">return</span> r</div></pre></td></tr></table></figure></p>
<p>and then use it as:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ufunc_reduce(np.add,a,b,c)</div><div class="line">array([[[<span class="number">15</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">13</span>],</div><div class="line">        [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">10</span>],</div><div class="line">        [<span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>,  <span class="number">9</span>]],</div><div class="line">       [[<span class="number">16</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">14</span>],</div><div class="line">        [<span class="number">13</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">11</span>],</div><div class="line">        [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">10</span>]],</div><div class="line">       [[<span class="number">17</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">15</span>],</div><div class="line">        [<span class="number">14</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">12</span>],</div><div class="line">        [<span class="number">13</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">11</span>]],</div><div class="line">       [[<span class="number">18</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">16</span>],</div><div class="line">        [<span class="number">15</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">13</span>],</div><div class="line">        [<span class="number">14</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">12</span>]]])</div></pre></td></tr></table></figure></p>
<p>The advantage of this version of reduce compared to the normal ufunc.reduce is that it makes use of the Broadcasting Rules in order to avoid creating an argument array the size of the output times the number of vectors.<br><strong>Indexing with strings</strong><br>See <a href="https://docs.scipy.org/doc/numpy-dev/user/RecordArrays.html" target="_blank" rel="external">RecordArrays</a><br>.</p>
<p>##线性代数<br>Work in progress. Basic linear algebra to be included here.<br><strong>Simple Array Operations</strong><br>See linalg.py in numpy folder for more.<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</div><div class="line">[[ <span class="number">1.</span>  <span class="number">2.</span>]</div><div class="line"> [ <span class="number">3.</span>  <span class="number">4.</span>]]</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.transpose()</div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">3.</span>],</div><div class="line">       [ <span class="number">2.</span>,  <span class="number">4.</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.linalg.inv(a)</div><div class="line">array([[<span class="number">-2.</span> ,  <span class="number">1.</span> ],</div><div class="line">       [ <span class="number">1.5</span>, <span class="number">-0.5</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>u = np.eye(<span class="number">2</span>) <span class="comment"># unit 2x2 matrix; "eye" represents "I"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u</div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">1.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>j = np.array([[<span class="number">0.0</span>, <span class="number">-1.0</span>], [<span class="number">1.0</span>, <span class="number">0.0</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.dot (j, j) <span class="comment"># matrix product</span></div><div class="line">array([[<span class="number">-1.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>, <span class="number">-1.</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.trace(u)  <span class="comment"># trace</span></div><div class="line"><span class="number">2.0</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = np.array([[<span class="number">5.</span>], [<span class="number">7.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.linalg.solve(a, y)</div><div class="line">array([[<span class="number">-3.</span>],</div><div class="line">       [ <span class="number">4.</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.linalg.eig(j)</div><div class="line">(array([ <span class="number">0.</span>+<span class="number">1.j</span>,  <span class="number">0.</span><span class="number">-1.j</span>]), array([[ <span class="number">0.70710678</span>+<span class="number">0.j</span>        ,  <span class="number">0.70710678</span><span class="number">-0.j</span>        ],</div><div class="line">       [ <span class="number">0.00000000</span><span class="number">-0.70710678j</span>,  <span class="number">0.00000000</span>+<span class="number">0.70710678j</span>]]))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">Parameters:</div><div class="line">    square matrix</div><div class="line">Returns</div><div class="line">    The eigenvalues, each repeated according to its multiplicity.</div><div class="line">    The normalized (unit <span class="string">"length"</span>) eigenvectors, such that the</div><div class="line">    column ``v[:,i]`` <span class="keyword">is</span> the eigenvector corresponding to the</div><div class="line">    eigenvalue ``w[i]`` .</div></pre></td></tr></table></figure>
<p>##技巧<br>Here we give a list of short and useful tips.<br><strong>“Automatic” Reshaping</strong><br>To change the dimensions of an array, you can omit one of the sizes which will then be deduced automatically:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">30</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape = <span class="number">2</span>,<span class="number">-1</span>,<span class="number">3</span>  <span class="comment"># -1 means "whatever is needed"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</div><div class="line">(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</div><div class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</div><div class="line">        [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</div><div class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</div><div class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]],</div><div class="line">       [[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</div><div class="line">        [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>],</div><div class="line">        [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</div><div class="line">        [<span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>],</div><div class="line">        [<span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>]]])</div></pre></td></tr></table></figure></p>
<p><strong>Vector Stacking</strong><br>How do we construct a 2D array from a list of equally-sized row vectors? In MATLAB this is quite easy: if x and y are two vectors of the same length you only need do m=[x;y]. In NumPy this works via the functions column_stack, dstack, hstack and vstack, depending on the dimension in which the stacking is to be done. For example:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">x = np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)                     <span class="comment"># x=([0,2,4,6,8])</span></div><div class="line">y = np.arange(<span class="number">5</span>)                          <span class="comment"># y=([0,1,2,3,4])</span></div><div class="line">m = np.vstack([x,y])                      <span class="comment"># m=([[0,2,4,6,8],</span></div><div class="line">                                          <span class="comment">#     [0,1,2,3,4]])</span></div><div class="line">xy = np.hstack([x,y])                     <span class="comment"># xy =([0,2,4,6,8,0,1,2,3,4])</span></div></pre></td></tr></table></figure></p>
<p>The logic behind those functions in more than two dimensions can be strange.<br>See also</p>
<blockquote>
<p><a href="https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html" target="_blank" rel="external">Numpy for Matlab users</a></p>
</blockquote>
<p><strong>柱状图</strong><br>The NumPy histogram function applied to an array returns a pair of vectors: the histogram of the array and the vector of bins. Beware: matplotlib also has a function to build histograms (called hist, as in Matlab) that differs from the one in NumPy. The main difference is that pylab.hist plots the histogram automatically, while numpy.histogram only generates the data.<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Build a vector of 10000 normal deviates with variance 0.5^2 and mean 2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mu, sigma = <span class="number">2</span>, <span class="number">0.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>v = np.random.normal(mu,sigma,<span class="number">10000</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Plot a normalized histogram with 50 bins</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>plt.hist(v, bins=<span class="number">50</span>, normed=<span class="number">1</span>)       <span class="comment"># matplotlib version (plot)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://docs.scipy.org/doc/numpy-dev/_images/quickstart-2_00_00.png" alt=""><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Compute the histogram with numpy and then plot it</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(n, bins) = np.histogram(v, bins=<span class="number">50</span>, normed=<span class="keyword">True</span>)  <span class="comment"># NumPy version (no plot)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>plt.plot(<span class="number">.5</span>*(bins[<span class="number">1</span>:]+bins[:<span class="number">-1</span>]), n)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</div><div class="line">​`</div></pre></td></tr></table></figure></p>
<p><img src="https://docs.scipy.org/doc/numpy-dev/_images/quickstart-2_01_00.png" alt=""></p>
<p>```</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##基本介绍<br>Numpy的主要对象是同质多维数组，同质是指数组里的元素都是相同的类型。Numpy的数组被称为<code>ndarray</code>,也有别名叫<code>array</code>.Python标准库的类<code>array.array</code>只提供一位数组和较少的功能，而<code>numpy.array</code>和它有很大的差别的，不能混淆。下面是<code>ndarray</code>的几个比较重要的属性：<br><strong>ndarray.ndim</strong><br>　　数组的维度个数。在Python世界里，维度的数量被称为rank。<br><strong>ndarray.shape</strong><br>　　数组的维度。这是一个表示每个维度数组大小的元组，对于一个有n行m列的矩阵, shape是(n,m)。shape元组的长度是rank，或者说维度的个数ndim。<br><strong>ndarray.size</strong><br>　　数组中元素的数量，和shape元素的数量相等。<br><strong>ndarray.dtype</strong><br>　　一个描述数组中元素类型的类。我们可以使用标准的Python类型来指定dtype。另外Numpy也提供了自己的类型。比如<code>numpy.int32</code>, <code>numpy.int16</code>, and <code>numpy.float64</code>。<br><strong>ndarray.itemsize</strong><br>　　数组元素的字节大小。比如<code>float64</code>的<code>itemsize</code>为8 (=64/8), <code>complex32</code>为4 (=32/8)。等于<code>ndarray.dtype.itemsize</code>。<br><strong>ndarray.data</strong><br>　　缓冲区中真实包含的数组元素。一般不会使用这个属性，因为我们使用索引访问数组中的元素。</p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://www.hoyoung.net/tags/Python/"/>
    
      <category term="数据分析" scheme="http://www.hoyoung.net/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Python" scheme="http://www.hoyoung.net/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动态规划算法wagner-whitin最优采购问题]]></title>
    <link href="http://www.hoyoung.net/2016/08/12/wagner-whitin-algorithm/"/>
    <id>http://www.hoyoung.net/2016/08/12/wagner-whitin-algorithm/</id>
    <published>2016-08-12T08:21:17.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>记得第一次接触动态规划算法不是计算机的算法书籍，而是运筹学。当时对于什么无后效性啊，前一个状态的最优不影响后一个状态啊什么的是一脸懵逼，做题时也只会照公式套。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>额，式子有点多，模型参数太多，我就上图片版的问题描述吧。一直觉得这些搞数学的总是把简单问题弄的那么抽象，刚看到题目的时候一头雾水，绕来绕去。<br><a id="more"></a><br><a href="/uploads/2016/08/problem.JPG"><img src="/uploads/2016/08/problem.JPG" alt="problem"></a></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="1-找最优值"><a href="#1-找最优值" class="headerlink" title="1.找最优值"></a>1.找最优值</h3><p>这里我也不讨论什么状态转移方程这对比较抽象的东西，对于动态规划问题，解决的套路都是用一个二维数据保存中间的最优值，因为无后效性或者说前一个状态的最优不影响后面的最优来向后推进。拿本体来讲，比如我就打算在第4期对4-5期一次全部采购，那对于前5期来讲，我不管你前3期怎么采购，我只要前3期的最优值，那我就可以得到在这个方案下前5期的最优值。采用类似于背包问题逐渐增大背包容量的做法，从0开始逐渐增大采购总期数。<br><a href="/uploads/2016/08//0812.png"><img src="/uploads/2016/08/0812.png" alt="problem"></a><br>我用f(m&gt;n)，m&lt;=n，表示在总期数只有n期的时候，采用一次性购买m&gt;n期方案时这n期的最低费用。比如:</p>
<ul>
<li>只有1期的时候，那最优费用就是f(1&gt;1)。只有一种采购方案</li>
<li>2期的时候，可以f(1&gt;2)一次采购完就完事儿了。也可以f(1&gt;1)+f(2&gt;2)采购两次，这时候可能还看不出来啥。</li>
<li>到了第三期，可以f(1&gt;3)一次性采购，也可以f(2&gt;3)+f(1)采购两次，也可以f(3&gt;3)+前2期的最优值，问题来了，我怎么知道前2期的最优值呢？观察第二列，其实f(1&gt;2)和f(2&gt;2)就记录了前两期不同采购方案的最优值，正如前面所说我不关心前面是怎么采购的，只要是最优的就行。所以选出f(1&gt;2)和f(2&gt;2)中的较小者不就能得到当前状态的最优值了嘛。这样当算到最后一期，最后一列的最小值就是最优值了</li>
</ul>
<h3 id="2-找最优方案"><a href="#2-找最优方案" class="headerlink" title="2.找最优方案"></a>2.找最优方案</h3><p>叙述太抽象，先上一个计算过程中产生的记录最优中间结果的数组。<br><a href="/uploads/2016/08//13.png"><img src="/uploads/2016/08/13.png" alt="problem"></a><br>这个计算样例有10期，所以是10x10的数组（后面看到在代码中定义的是11x11的数组是为了方便的处理下标，实际不参与计算），从最后一列开始找最小值，找到倒数第二行，这个方框里的数据代表什么呢？如果前面的看明白了就知道它代表的是f(9&gt;10)，即在第9期的时候采购第9和第10期的，然后跳过第9期，在第8列找第8期的最优值，找到了倒数第4行，解释和前面的一样。像这样从后往前推就可以找到最优的采购方案了。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">package net.hoyoung;</div><div class="line">public class Solution &#123;</div><div class="line">	// 周期数</div><div class="line">	static final int N = 10;</div><div class="line">	// 每期的需求量</div><div class="line">	static final int[] d = new int[N];</div><div class="line">	// 每期的固定费用</div><div class="line">	static final double[] k = new double[N];</div><div class="line">	// 每期的单位订货费用</div><div class="line">	static final double[] c = new double[N];</div><div class="line">	// 每期的单位存储费用</div><div class="line">	static final double[] h = new double[N];</div><div class="line">	static &#123;</div><div class="line">		for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">			d[i] = (int) (Math.round(Math.random() * 100) + 10);</div><div class="line">			c[i] = Math.random() * 80 + 10;</div><div class="line">			k[i] = Math.random() * 40 + 10;</div><div class="line">			h[i] = Math.random() + 0.1;</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;需求量:&quot;);</div><div class="line">		for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">			if (i &gt; 0) &#123;</div><div class="line">				System.out.print(&quot;\t&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.print(d[i]);</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;\n订货费用:&quot;);</div><div class="line">		for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">			if (i &gt; 0) &#123;</div><div class="line">				System.out.print(&quot;\t&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.print(c[i]);</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;\n固定费用:&quot;);</div><div class="line">		for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">			if (i &gt; 0) &#123;</div><div class="line">				System.out.print(&quot;\t&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.print(k[i]);</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;\n存储费用:&quot;);</div><div class="line">		for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">			if (i &gt; 0) &#123;</div><div class="line">				System.out.print(&quot;\t&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.print(h[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	/*上面是构造随机数据，忽略即可*/ </div><div class="line">	// 存储低i&gt;j期的最优值</div><div class="line">	double[][] cost = new double[N + 1][N + 1];</div><div class="line">	// 记录采购计划</div><div class="line">	int[] orders = new int[N];</div><div class="line">	public void solve() &#123;</div><div class="line">		for (int i = 1; i &lt;= N; i++) &#123;</div><div class="line">			/**</div><div class="line">			 * 查找前i-1期的最优值</div><div class="line">			 */</div><div class="line">			double tMinCost = 0;</div><div class="line">			if (i &gt; 1) &#123;</div><div class="line">				tMinCost = Double.MAX_VALUE;</div><div class="line">				for (int j = 1; j &lt;= i - 1; j++) &#123;</div><div class="line">					if (cost[j][i - 1] &lt; tMinCost) &#123;</div><div class="line">						tMinCost = cost[j][i - 1];</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			for (int j = i; j &lt;= N; j++) &#123;</div><div class="line">				/**</div><div class="line">				 * 计算i&gt;j期间费用</div><div class="line">				 */</div><div class="line">				double sum = 0;// i&gt;j区间的需求量</div><div class="line">				double csum = 0;// 这次总的订货费用</div><div class="line">				for (int k = i; k &lt;= j; k++) &#123;</div><div class="line">					sum += d[k - 1];</div><div class="line">					csum += c[k - 1] * d[k - 1];</div><div class="line">				&#125;</div><div class="line">				double hsum = 0;// 这次总的存储费用</div><div class="line">				for (int k = i; k &lt;= j; k++) &#123;</div><div class="line">					hsum += h[k - 1] * (sum - d[k - 1]);</div><div class="line">					sum -= d[k - 1];</div><div class="line">				&#125;</div><div class="line">				// 订货费+存储费+固定费+前i-1期的最优费用</div><div class="line">				cost[i][j] = csum + hsum + k[i - 1] + tMinCost;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;\n中间结果数组:&quot;);</div><div class="line">		this.printCost();</div><div class="line">		/**</div><div class="line">		 * 从后往前推出最优采购计划</div><div class="line">		 */</div><div class="line">		int i = N;</div><div class="line">		do &#123;</div><div class="line">			double min = Double.MAX_VALUE;</div><div class="line">			int minLine = 0;</div><div class="line">			for (int j = 1; j &lt;= i; j++) &#123;</div><div class="line">				if (min &gt; cost[j][i]) &#123;</div><div class="line">					min = cost[j][i];</div><div class="line">					minLine = j;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			if(i==N)&#123;</div><div class="line">				System.out.println(&quot;最低费用:&quot;+min);</div><div class="line">			&#125;</div><div class="line">			// 往前推</div><div class="line">			int sum = 0;// 订购量</div><div class="line">			// 批量采购的情况</div><div class="line">			while (cost[minLine][i--] &gt; 0) &#123;</div><div class="line">				sum += d[i];</div><div class="line">				orders[i] = 0;</div><div class="line">			&#125;</div><div class="line">			i += 1;</div><div class="line">			orders[i] = sum;</div><div class="line">			</div><div class="line">		&#125; while (i &gt; 0);</div><div class="line">		System.out.println(&quot;最优采购计划:&quot;);</div><div class="line">		this.printOrders();</div><div class="line">	&#125;</div><div class="line">	public void printCost() &#123;</div><div class="line">		for (int i = 0; i &lt; cost.length; i++) &#123;</div><div class="line">			for (int j = 0; j &lt; cost[i].length; j++) &#123;</div><div class="line">				if (j &gt; 0) &#123;</div><div class="line">					System.out.print(&quot;\t&quot;);</div><div class="line">				&#125;</div><div class="line">				System.out.print(cost[i][j]);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public void printOrders()&#123;</div><div class="line">		for (int i = 0; i &lt; orders.length; i++) &#123;</div><div class="line">			if(i&gt;0)&#123;</div><div class="line">				System.out.print(&quot;\t&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.print(orders[i]);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		new Solution().solve();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>记得第一次接触动态规划算法不是计算机的算法书籍，而是运筹学。当时对于什么无后效性啊，前一个状态的最优不影响后一个状态啊什么的是一脸懵逼，做题时也只会照公式套。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>额，式子有点多，模型参数太多，我就上图片版的问题描述吧。一直觉得这些搞数学的总是把简单问题弄的那么抽象，刚看到题目的时候一头雾水，绕来绕去。<br>]]>
    
    </summary>
    
      <category term="算法" scheme="http://www.hoyoung.net/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://www.hoyoung.net/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu14.04搭建http正向代理]]></title>
    <link href="http://www.hoyoung.net/2016/07/05/Ubuntu14.04%E6%90%AD%E5%BB%BAhttp%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://www.hoyoung.net/2016/07/05/Ubuntu14.04搭建http正向代理/</id>
    <published>2016-07-05T10:13:39.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="爬虫需要"><a href="#爬虫需要" class="headerlink" title="爬虫需要"></a>爬虫需要</h2><p>最近在搭建一个代理IP池用于爬虫。现在越来越多的网站做了反爬策略。如果爬取过程太规律或者频率太快会被他们发现这不是正常人的行为而封的ip，好的话封几个小时，坏的话直接永久封禁。虽然可以把爬取速度放满来避免。但是太慢了又会拖延业务。如果你有大量可用的代理ip给爬取过程中做切换，那对方就不容易辨别了，可以提高抓取频率。要写一个维护ip代理池程序首先你得有一个可用的代理服务器做测试啊！正好我买了个国外的vps，配成http代理就可以做测试了。<br><a id="more"></a><br>搜了些教程，没有找到ubuntu下apache2的正向代理配置方法，都是旧版的，配置文件都不一样，这还搞个毛啊。好在自己通过参考和理解配置好了，特此记录。</p>
<h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h3><p>这个没啥说的<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure></p>
<h3 id="启用模块"><a href="#启用模块" class="headerlink" title="启用模块"></a>启用模块</h3><p>进入到目录/etc/apache2/，注意apache2模块的启用和以前很不同，apache2所有的可用模块都放在了mods-available目录下，那么如何启用呢？我们会看到同级目录下有个mods-enabled，ll列一下文件发现都是指向mods-available目录下文件的软连接。这下明白了吧，我们只需要把需要启动的模块xxx.load在mods-enabled建个同名的软连接即可。<br><a href="/uploads/2016/08/05_00.png"><img src="/uploads/2016/08/05_00.png" alt="软连接"></a></p>
<p><font style="collor:red">先进入mods-enabled目录下</font><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo ln -s  ../mods-available/proxy.load proxy.load</div><div class="line">sudo ln -s  ../mods-available/proxy_connect.load proxy_connect.load</div><div class="line">sudo ln -s  ../mods-available/proxy_http.load proxy_http.load</div><div class="line">sudo ln -s  ../mods-available/proxy_ftp.load proxy_ftp.load</div></pre></td></tr></table></figure></p>
<p>别忘了还有一个Proxy的配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo ln -s ../mods-available/proxy.conf proxy.conf</div></pre></td></tr></table></figure></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改配置文件，把下面代码的注释去掉<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ProxyRequests On</div></pre></td></tr></table></figure></p>
<p>重启apache<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo service apache2 restart</div></pre></td></tr></table></figure></p>
<p>测试一下，我用火狐测试的，其他浏览器仿照配置，打开“选项”，到代理配置面板，配上你的apache的地址和端口。<br><a href="/uploads/2016/08/05_01.png"><img src="/uploads/2016/08/05_01.png" alt="火狐代理配置"></a><br><a href="/uploads/2016/08/05_02.png"><img src="/uploads/2016/08/05_02.png" alt="火狐代理配置"></a><br>OK了，在浏览器访问<a href="http://www.ip138.com/" target="_blank" rel="external">http://www.ip138.com/</a> ，网站解析的ip地址确实是我在美国的vps的地址，说明代理配置生效了。<br><a href="/uploads/2016/08/05_03.png"><img src="/uploads/2016/08/05_03.png" alt="验证代理是否生效"></a></p>
<p>其他的一些高级配置就可以参考<a href="http://blog.csdn.net/lk_cool/article/details/4489684" target="_blank" rel="external">http://blog.csdn.net/lk_cool/article/details/4489684</a> 了，不在赘述</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="爬虫需要"><a href="#爬虫需要" class="headerlink" title="爬虫需要"></a>爬虫需要</h2><p>最近在搭建一个代理IP池用于爬虫。现在越来越多的网站做了反爬策略。如果爬取过程太规律或者频率太快会被他们发现这不是正常人的行为而封的ip，好的话封几个小时，坏的话直接永久封禁。虽然可以把爬取速度放满来避免。但是太慢了又会拖延业务。如果你有大量可用的代理ip给爬取过程中做切换，那对方就不容易辨别了，可以提高抓取频率。要写一个维护ip代理池程序首先你得有一个可用的代理服务器做测试啊！正好我买了个国外的vps，配成http代理就可以做测试了。<br>]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://www.hoyoung.net/tags/Ubuntu/"/>
    
      <category term="Apache" scheme="http://www.hoyoung.net/tags/Apache/"/>
    
      <category term="代理" scheme="http://www.hoyoung.net/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java单核CPU多线程内存模型的疑问]]></title>
    <link href="http://www.hoyoung.net/2016/04/26/Java%E5%8D%95%E6%A0%B8CPU%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%96%91%E9%97%AE/"/>
    <id>http://www.hoyoung.net/2016/04/26/Java单核CPU多线程内存模型的疑问/</id>
    <published>2016-04-26T12:29:30.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/2016/04/cpu1.png" alt="CPU情况"><br>&#160;&#160;&#160;&#160;在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。具体来讲就是:<u>Java内存模型规定所有的变量都是存在主存当中，每个线程都有自己的工作内存。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存.</u><br><a id="more"></a><br>我们知道CPU的执行速度比内存快得多,不在同一个数量级,内存严重拉低了CPU的效率,我们花大价钱买个CPU肯定不是让他老在那睡觉啊,所以为了平衡CPU与内存间的速度,CPU里一般会加入高速缓存,当然,这个高速缓存的价格是很高昂.通过总线锁(现在已经不常用)或者缓存一致性协议来保证缓存中的数据和主存是一致的.另外,CPU的每个核心都有自己的缓存.那么,这和Java的内存模型有什么关系呢?</p>
<p>&#160;&#160;&#160;&#160;Java多线程充分利用了CPU的多核并行特性,使得多个任务分配到多个CPU并发执行.如果线程的数量大于CPU的数量,则采用轮换时间片的方式对多个线程进行轮流执行.我看到过一种说话,Java的工作内存等同于CPU里的高速缓存,按照这种说话,那Java里的工作内存不久很好理解了吗,但是观点听上去非常的具有迷惑性,按照这种说话,单核CPU下不就有相同的工作内存了吗,内存可见性以及多线程情况下的共享变量的读写都不存在不一致的问题了啊.</p>
<p>&#160;&#160;&#160;&#160;那么在线程数大于CPU核心数的情况下,Java的内存模型和多核心的是一样的吗?看过很多讲Java内存模型的文章，这些文章在讲线程工作内存的时候都是把CPU的多个核心比作多个线程，每个线程运行在一个核心上，核心的缓存认为是线程的工作内存，老实说这么还真有利于理解，但是事实真的是这样的吗？我们做了个实验验证一下,我们就在单核CPU下做，在单核下多个线程同时递增一个共享变量，但是不保证同步，如果前面的说法是正确的，结果应该和单线程的结果是一样的。在最极端的单核CPU下做的,这样效果也最明显.下面是我写的简单的例子,创建10个线程,每个线程对count进行100000000次的递增操作,对count变量的修改没有使用任何锁.用大腿都能想到在单线程下输出的结果是10<em>100000000,在多核心CPU下的多线程模式下输出的结果小于10</em>100000000.那么在单核CPU会怎么样呢?<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line">import java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by hoyoung on 16-4-26.</div><div class="line"> */</div><div class="line">public class OneCoreThreadVisibilityDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        CounterRunnableImpl counter = new CounterRunnableImpl();</div><div class="line">        //创建一个线程池</div><div class="line">        ExecutorService threadPool = Executors.newCachedThreadPool();</div><div class="line">        //创建10个线程</div><div class="line">        for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            threadPool.execute(counter);</div><div class="line">        &#125;</div><div class="line">        threadPool.shutdown();</div><div class="line">        try &#123;</div><div class="line">            //这里是等待线程池中的线程全部执行完</div><div class="line">            threadPool.awaitTermination(100, TimeUnit.SECONDS);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        //输出计数器的结果</div><div class="line">        System.out.println(counter.getCount());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class CounterRunnableImpl implements Runnable &#123;</div><div class="line">        //定义一个共享的计数器</div><div class="line">        private int count = 0;</div><div class="line"></div><div class="line">        public int getCount() &#123;</div><div class="line">            return count;</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            System.out.println(Thread.currentThread()+&quot;开始运行&quot;);</div><div class="line">            //为了让效果明显,取一个较大的值</div><div class="line">            int len = 100000000;</div><div class="line">            while (len-- &gt; 0) &#123;</div><div class="line">//                synchronized (this)&#123;</div><div class="line">                    count += 1;//递增操作</div><div class="line">//                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&#160;&#160;&#160;&#160;于是我装了个UbuntuServer系统的虚拟机,使用htop命令查看系统的CPU情况如下:<br><img src="/uploads/2016/04/cpu1.png" alt="CPU情况"><br>可以看到,系统只有一个cpu,编译后的执行结果如下:结果小于10*100000000<br><img src="/uploads/2016/04/result1.png" alt="CPU情况"></p>
<p>&#160;&#160;&#160;&#160;<u>所以,这个实验说明（还不够充分）不论在多核心还是单核心下,Java的内存模型是一样的,每个线程都有自己的工作内存，但是这个工作内存并不一定是和CPU的核心缓存一一对应。</u></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/2016/04/cpu1.png" alt="CPU情况"><br>&#160;&#160;&#160;&#160;在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。具体来讲就是:<u>Java内存模型规定所有的变量都是存在主存当中，每个线程都有自己的工作内存。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存.</u><br>]]>
    
    </summary>
    
      <category term="多线程" scheme="http://www.hoyoung.net/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="内存模型" scheme="http://www.hoyoung.net/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[制作狂拽酷炫的LED CUBE]]></title>
    <link href="http://www.hoyoung.net/2016/04/02/%E5%88%B6%E4%BD%9C%E7%8B%82%E6%8B%BD%E9%85%B7%E7%82%AB%E7%9A%84LED_CUBE/"/>
    <id>http://www.hoyoung.net/2016/04/02/制作狂拽酷炫的LED_CUBE/</id>
    <published>2016-04-02T12:54:01.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><iframe src="http://player.youku.com/embed/XMzI1ODQ5NjAw" frameborder="0" allowfullscreen></iframe><br><a id="more"></a></p>
<h3 id="DIY情节"><a href="#DIY情节" class="headerlink" title="DIY情节"></a>DIY情节</h3><p>自己从小就喜欢搞小制作,高中的时候经常自己到电子元器件市场买原件,按照网上搜来的电路图焊接一些收音机,对讲机等等.进入大学之后很遗憾没能进入电子类专业,自己当时还信誓旦旦的说将来要努力转专业什么的,但是当时学校可没有这个政策.其实最大的原因还是自己悠闲的大学时光磨灭了自己的意志,呵呵!不过呢,不过我对于电子技术是发自内心的喜爱,并不是想着将来靠着这个混饭吃.自己最大的乐趣就是欣赏自己通过学习知识而做出来的成果.于是呢,在我这个跟电子技术毫不相干的专业,我搜集了大量的自学资料,并且有意识的交往电子相关专业的朋友,在西电这个IT大背景下,这个很容易.而且学校整体的IT氛围也促使我坚持学习电子技术.不过说实在的,我在这方面的学习和科班的有本质的不同,我学习的目的是为我所用,靠着知识做出自己想要的东西,而不是仅仅为了考试,为了将来的职业.所以我自己对这方面学习的不够系统,很多知识也仅仅是先做了解,到真正用的时候再具体看.经过差不多一年的学习,自己对电路也有了一定的认识,尤其是数电,通过程序来控制硬件做出相应的动作,这可是我以前未曾见过的,当时特别的兴奋.偶尔在网上看到光立方,被这个炫酷的立体动画震撼到了.尽管8<em>8</em>8的分辨率很低很低,但是光影动画构成的效果给人的第一观感是很棒的.</p>
<h3 id="焊接LED"><a href="#焊接LED" class="headerlink" title="焊接LED"></a>焊接LED</h3><p>那时候大一快到暑假了,当时自己已经掌握了单片机的基础,自己经常做一些小实验.但是当时来说,做这个东西难度很大,不说写这个控制程序,焊接整个电路对当时的我来说就是个巨大的工程,一共有8<em>8</em>8=512颗LED需要焊接.当时觉得等我牛逼到能把这东西做出来那得到什么时候,但是我依旧下了决心做这个,积累资料,做实验,一点一点的尝试,先从控制二维平面开始学习如何控制点阵,取字模显示图样.觉得差不多了,就买了600颗LED回来焊接.焊接这个东西将近花了两周的时间,我把这个立方体分成了八个面,等到八个面焊接完了再组成立方体,否则之后焊成立方体,后面出问题了排错和换LED都异常麻烦.就这样每焊完一面就做一下测试,修正不亮的LED.<br>分块焊接的LED灯组:<br><a href="/uploads/2016/05/IMAG0015.jpg"><img src="/uploads/2016/05/IMAG0015.jpg" alt="分块焊接的LED"></a></p>
<h3 id="固定支架"><a href="#固定支架" class="headerlink" title="固定支架"></a>固定支架</h3><p>8面LED灯组焊接完成后,需要找到合适的固定这8面LED的方法,一开始想过焊死,但是这样如果有LED出问题坏掉了,那更换LED的时候还不得麻烦死而且不利于拆卸.后面突然看到了经常在面包板和洞洞板上用的排孔,那个不正好可以插进LED管脚吗,于是选用了这个方案,于是从排孔中拆除了64个作为固定LED管脚的支架.<br>固定LED的排孔:<br><a href="/uploads/2016/05/IMAG0016.jpg"><img src="/uploads/2016/05/IMAG0016.jpg" alt="分块焊接的LED"></a></p>
<h3 id="焊接单片机驱动电路"><a href="#焊接单片机驱动电路" class="headerlink" title="焊接单片机驱动电路"></a>焊接单片机驱动电路</h3><p>单片机最小集成板没啥好说的,主要是驱动电路,我采用的LED的额定电流是10ma的,每一面64颗LED并联,这样没一面最好的工作电流就是640ma.无论是单片机的输出电流还是灌电流都承受不了.看到别人有的使用2803的驱动IC,查了下,也采用这个方案,这样加上STC IO口的大电流输出模式,阴极驱动,不用其他多余的元器件就可以点亮所有的LED.下面是焊接好的控制电路板.</p>
<h3 id="组装调试"><a href="#组装调试" class="headerlink" title="组装调试"></a>组装调试</h3><p>现在再看那些密密麻麻的走线,我都不知道我当时是怎么完成这么大的工作量的.有些让你望而却步的东西,总觉得自己做不到而不去尝试,只有逼着自己去做,一点点的积累,等成功了回头再看自己成果,自己都佩服自己了.<br><a href="/uploads/2016/05/IMG_20111111_125001.jpg"><img src="/uploads/2016/05/IMG_20111111_125001.jpg" alt="分块焊接的LED"></a><br><a href="/uploads/2016/05/SDC13069_conew1.jpg"><img src="/uploads/2016/05/SDC13069_conew1.jpg" alt="分块焊接的LED"></a></p>
<h3 id="编程控制"><a href="#编程控制" class="headerlink" title="编程控制"></a>编程控制</h3><p>前面的工作只是造就了一副躯体，而真正让这副躯体工作起来的是单片的程序，通过写程序来控制单片机IO口的数据来精确控制每一颗LED的显示。另外我们只用了8个IO口实现了控制512颗LED的能力。其实这只是利用了人的视觉暂留效应只是画面切换的太快使得你感觉它是连续的。我觉得啊，做这个东西最大的乐趣是在后面，躯体完成后几乎可以一劳永逸了，除非做硬件上的扩展和修改。后面的所有图形动画的显示都是依靠编写程序控制的。512颗LED在程序里需要512个二进制位表示。也就是64字节，做一程序里我用8×8的byte数组来表示。封装好驱动显示程序，将这8×8的字节数组作为参数输入即可显示。所有我们后面对图形的一切操作都是对这而二维数组的操作。所以呢，对于有规律的图形，我们可以通过循环来生成数据。没有规律的图形，则只能像给LED显示屏取字模的形式来给数组赋值了。另外计算机图形学的一些算法，比如旋转，转换坐标系都可以用来丰富图形的显示。<br>来一张全亮的整体照片,幽幽蓝光下,充满了科技感,有人比喻这是泰坦能量块,哈哈哈!<br><a href="/uploads/2016/05/69.png"><img src="/uploads/2016/05/69.png" alt="分块焊接的LED"></a></p>
<h3 id="PC软件控制"><a href="#PC软件控制" class="headerlink" title="PC软件控制"></a>PC软件控制</h3><p>上一节说的编程控制，程序编译后是烧写到单片机里面的，这就意味着一旦程序烧写进去，那么以后显示的就是那些固化在单片机里的图形了，这太局限了，而且给新动画的调试也带来了不变，因为每次调试新动画改一点东西想看效果就得把程序烧写一遍，虽然说有了USB转串口的技术，但是还是挺麻烦。于是我想到可以只将光立方作为一个显示设备，而图形数据在pc端生成传给光立方显示。这就和我们平时用的电脑显示器一样。于是我用Java实现了一个控制程序和取模程序，使用USB串口进行通信。<br>总体原理图：<br><a href="/uploads/2016/05/20160502225529.png"><img src="/uploads/2016/05/20160502225529.png" alt="总体原理图"></a><br>原理图和源代码都在这里下载：<a href="http://download.csdn.net/download/shihun1234/4515106" target="_blank" rel="external">http://download.csdn.net/download/shihun1234/4515106</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><iframe src="http://player.youku.com/embed/XMzI1ODQ5NjAw" frameborder="0" allowfullscreen></iframe><br>]]>
    
    </summary>
    
      <category term="单片机" scheme="http://www.hoyoung.net/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="光立方" scheme="http://www.hoyoung.net/tags/%E5%85%89%E7%AB%8B%E6%96%B9/"/>
    
      <category term="闲扯" scheme="http://www.hoyoung.net/categories/%E9%97%B2%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS和CSS3实现的网络最短路径图形求解工具]]></title>
    <link href="http://www.hoyoung.net/2016/03/24/JS%E5%92%8CCSS3%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%9B%BE%E5%BD%A2%E6%B1%82%E8%A7%A3%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.hoyoung.net/2016/03/24/JS和CSS3实现的网络最短路径图形求解工具/</id>
    <published>2016-03-24T06:05:53.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>演示地址：<a href="http://xdpaper.applinzi.com/GraphTheory/" target="_blank" rel="external">http://xdpaper.applinzi.com/GraphTheory/</a><br>源代码下载链接：<a href="http://pan.baidu.com/s/1qWYx01A" target="_blank" rel="external">http://pan.baidu.com/s/1qWYx01A</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&#160;&#160;&#160;&#160;这是很早以前做的东西了，今天整理硬盘突然想起来了。当年学运筹学的图论（我也是个渣渣），学习了一个求最短路径的Floyd算法，求最短路径的还有dijkstra算法。Floyd算法是将图转化为邻接矩阵，然后进行迭代，具体的算法原理资料一大堆，作为一个渣渣我也就不在这里装了，哈哈！做作业的时候，由图写出邻接矩阵是个细致活儿，一不小心就弄错，于是我就想，弄个图形化的求解工具该多好。于是就干呗！<br><a id="more"></a></p>
<h1 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h1><p>&#160;&#160;&#160;&#160;从学习电子商务网站开发与设计的那门课开始，老师就给我们讲，”以后的应用都向B/S架构发展，几乎所有的应用都会搬到浏览器上，以后我们的电脑只需要装个浏览器就可以完成所有的工作。“在PC应用上好像确实是这样。但在移动应用可是恰恰相反哦，额…扯远了。为了让大家都能用上这个工具呢，那就用全部在前端实现。自己以前课余时间做过Java Web和PHP Web的开发，虽说倾向于后台开发，但是web前端功底也不赖嘛（YY烂西红柿臭鸡蛋正在飞来）！<br>&#160;&#160;&#160;&#160;在web前端技术中，CSS3的标准极大的丰富了web页面的样式，再结合html5,原来很多需要特殊应用程序才能完成的工作由h5和css3完成就行了。本应用主要使用了css3的旋转特性，这就为我们的网络路径的旋转移动提供了可能。主要流程如下：</p>
<ul>
<li>先在绘图区中放置端点</li>
<li>然后用线段连接端点</li>
<li>当移动端点的时候，连接这个端点的线段也会同时变化移动</li>
<li>选择起始点和终点后生成邻接矩阵</li>
<li>将生成的邻接矩阵送个编写好的Floyd算法运算出结果</li>
<li>根据输出的路径结果在绘图区中标注出路径</li>
</ul>
<p>在JavaScript中编写两个类，一个Circle表示顶点，一个Line表示路径，路径Line有两个顶点属性分别指向Circle的对象。所有的Line对象放置在一个数组中，当Circle对象移动的时候，遍历Line数组，与这个Circle对象有连接的Line都要跟着变化。具体实现还有很多细节，比如根据两个顶点的位置坐标计算夹角来确定css3中的旋转角度等。<br>下面是效果图：<br><a href="/uploads/2016/03/zuiduanlu.jpg"><img src="/uploads/2016/03/zuiduanlu.jpg" alt="效果图"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>演示地址：<a href="http://xdpaper.applinzi.com/GraphTheory/" target="_blank" rel="external">http://xdpaper.applinzi.com/GraphTheory/</a><br>源代码下载链接：<a href="http://pan.baidu.com/s/1qWYx01A" target="_blank" rel="external">http://pan.baidu.com/s/1qWYx01A</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&#160;&#160;&#160;&#160;这是很早以前做的东西了，今天整理硬盘突然想起来了。当年学运筹学的图论（我也是个渣渣），学习了一个求最短路径的Floyd算法，求最短路径的还有dijkstra算法。Floyd算法是将图转化为邻接矩阵，然后进行迭代，具体的算法原理资料一大堆，作为一个渣渣我也就不在这里装了，哈哈！做作业的时候，由图写出邻接矩阵是个细致活儿，一不小心就弄错，于是我就想，弄个图形化的求解工具该多好。于是就干呗！<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[排版修复小小工具]]></title>
    <link href="http://www.hoyoung.net/2016/03/24/%E6%8E%92%E7%89%88%E4%BF%AE%E5%A4%8D%E5%B0%8F%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.hoyoung.net/2016/03/24/排版修复小小工具/</id>
    <published>2016-03-24T05:08:41.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>首先直接给出工具的链接<a href="http://xdpaper.applinzi.com/demo/enfilter.html" target="_blank" rel="external">http://xdpaper.applinzi.com/demo/enfilter.html</a></p>
<h1 id="英文渣的痛点"><a href="#英文渣的痛点" class="headerlink" title="英文渣的痛点"></a>英文渣的痛点</h1><p>&#160; &#160; &#160; &#160;作为一名研究僧，搞科研看论文是必不可少的，导师还一再强调我们要看英文文献，可是本人虽然过了天朝英语六级，可还是个英语渣渣，看英文文献跟天书似的。所以呢看英文文献就借助翻译工具了，还好现在的翻译工具还算给力，即使翻译的不通顺，自己再看看原文也是能够理解作者的意思的。我看自己周围的很多同学也是要借助翻译才能完全理解论文的意思。<br><a id="more"></a><br>&#160; &#160; &#160; &#160;那么问题来了，我们下载的文献几乎都是pdf格式的，扫描版的我们不提，因为这跟图片一样几乎没办法复制，而大多从word转换得到的pdf文件，里面的文字我们是可以复制的。可是当我们复制到翻译工具的输入框中时，复制文字的排版不是连续的，文本还保持了原有的换行，以及有的完整的英语单词在采用了等宽分布的排版后为了维持等宽，会把单词拆开用’-‘分隔。我对比了这样的翻译结果和把排版整理恢复为正常排版的翻译结果，这两个的翻译结果可是有差别的。正常的排版更接近于语义。<br>比如pdf中的一个段落是这样的<br><a href="/uploads/2016/03/pdfdemo.png"><img src="/uploads/2016/03/pdfdemo.png" alt="pdf原段落"></a><br>我们复制文本输入框之后是这样的，这排版保持了和pdf一样的排版，但是明显不对嘛。<br><a href="/uploads/2016/03/pdf_copy.png"><img src="/uploads/2016/03/pdf_copy.png" alt="复制到文本框"></a><br>我们希望它能恢复成这个样子<br><a href="/uploads/2016/03/pdf_check.png"><img src="/uploads/2016/03/pdf_check.png" alt="正确的排版"></a><br>&#160; &#160; &#160; &#160;如果懂点编程的话，这个问题是很好解决的，起初我是这么干的，使用高级点的文本编辑器，比如sublime text，atom等，打开替换功能，用两步正则替换就可以恢复成正常的排版了。</p>
<h1 id="一步到位"><a href="#一步到位" class="headerlink" title="一步到位"></a>一步到位</h1><p>&#160; &#160; &#160; &#160;作为一名懒癌中度患者，每次复制pdf，粘贴到atom，在写两下正则表达式来替换，还是觉得麻烦，于是呢就做了这个小小工具，之所以称为小小工具，因为这真的实在是太太太简单了。其实就是用正则先把’\n’的换行符替换为空格’ ‘，然后在用正则’- ‘替换为空字符’’，这样就恢复了原来被拆开的完整英文单词了。这个小工具知识刚刚制作，还很简陋。<br><a href="/uploads/2016/03/pdfe.png"><img src="/uploads/2016/03/pdfe.png" alt="最终的样子"></a></p>
<h1 id="后面的改进"><a href="#后面的改进" class="headerlink" title="后面的改进"></a>后面的改进</h1><ul>
<li>‘-‘分隔的专有词组的过滤，有的单词它就是用’-‘分隔，但人家就是一个完整的单词，比如cloud-based。打算通过建立一个词库来过滤。</li>
<li>引文段落里面可能还包含引用的文献标号，有的是数字，有的是带中括号的数据，这些需要去掉。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先直接给出工具的链接<a href="http://xdpaper.applinzi.com/demo/enfilter.html" target="_blank" rel="external">http://xdpaper.applinzi.com/demo/enfilter.html</a></p>
<h1 id="英文渣的痛点"><a href="#英文渣的痛点" class="headerlink" title="英文渣的痛点"></a>英文渣的痛点</h1><p>&#160; &#160; &#160; &#160;作为一名研究僧，搞科研看论文是必不可少的，导师还一再强调我们要看英文文献，可是本人虽然过了天朝英语六级，可还是个英语渣渣，看英文文献跟天书似的。所以呢看英文文献就借助翻译工具了，还好现在的翻译工具还算给力，即使翻译的不通顺，自己再看看原文也是能够理解作者的意思的。我看自己周围的很多同学也是要借助翻译才能完全理解论文的意思。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[论文投稿管理小系统]]></title>
    <link href="http://www.hoyoung.net/2016/03/18/%E8%AE%BA%E6%96%87%E6%8A%95%E7%A8%BF%E7%AE%A1%E7%90%86%E5%B0%8F%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.hoyoung.net/2016/03/18/论文投稿管理小系统/</id>
    <published>2016-03-18T08:03:03.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简单的需求"><a href="#简单的需求" class="headerlink" title="简单的需求"></a>简单的需求</h1><p>作为一名研究僧，写论文是发布你科研成果的必经之路。而整个研究僧生涯即使你很牛B，发的论文不过两三篇。前几年传的那个清华大学的最年轻审稿人拥有几十篇论文可不算啊。而对于你的导师，比如我的导师是副教授，每年招收两名研究生，研一到研三有6名在线学僧。而教授呢，每年可以招收4个甚至更多，这些学生都要发论文，而且还不是一篇两篇。作为一名负责人的导师，他会关注你的论文发表情况，那么问题来了，这么多论文，导师怎么实时掌控你的论文投稿情况呢？靠脑袋记？导师本来就琐事缠身，哪有多余的脑细胞去记这个。脑袋记不住那记在云笔记里？似乎不会占用脑细胞，但是记录起来多麻烦啊！于是和导师的商量下就有了一个开发这么个系统的想法。<br><a id="more"></a><br>具体功能：</p>
<h2 id="导师"><a href="#导师" class="headerlink" title="导师"></a>导师</h2><ul>
<li><strong>期刊维护</strong><br>  导师的研究领域内一般都有很多期刊可以投搞，比如我的导师在信息系统，管理等领域就有几十个期刊可以投稿，这些期刊又有网址，投稿人注册的用户名和密码，那么多的期刊账户，用户名和密码记忆起来也是挺麻烦的，更重要的期刊还有级别的，比如CSCD，A刊，B刊，CSCI等。</li>
<li><strong>学生维护</strong><br>  导师能够对学生的基本信息进行维护，学生端的账号是由导师给分配的。</li>
<li><strong>学生论文投稿状态查看</strong><br>  这是这个小系统的核心功能，导师可以实时掌控学生论文当前的投稿状态已经未录用论文的投稿历史。</li>
<li><strong>学生论文状态更新的消息通知</strong><br>  这个算是锦上添花的功能了，当学生更新了论文状态后通知导师。</li>
</ul>
<h2 id="学生"><a href="#学生" class="headerlink" title="学生"></a>学生</h2><ul>
<li><strong>期刊维护</strong><br>  之所以给学生也有这个功能，是考虑到，期刊的信息也是挺多的，导师和学生共同维护更方便。</li>
<li><strong>论文维护</strong><br>  学生在这里管理自己的论文</li>
<li><strong>投稿状态维护</strong><br>  这时学生端的核心功能，对已录入的论文进行投稿，以及更新正在投稿的论文的状态。</li>
</ul>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>对于小规模的开发，php+mysql无疑是最经济和快捷的了。于是我选取了thinkphp框架，这时国人开发的框架，结构和Java里的Spring MVC非常的像。</p>
<h1 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h1><p>php的服务器那是很多，不过想找一个几乎免费还有域名的也不是那么容易，这个系统的运行费用也不能在导师的项目里报销啊。不过满足我需求的Server还是有的，那就是新浪云。以前注册SAE并且通过了实名认证，送了我两千多的云豆，每天大概消耗几个豆豆，够用很久了。不过新浪SAE禁止写操作，而且限制了很多函数的使用，文件存储只能放在Storage里，而且php版本是5.3，我花了一天的时间修改代码来适配SAE的环境。具体的部署方法，在SAE的官方文档里说的很清楚了。</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>下面是一些主要页面的截图：<br>登陆界面，登陆分为学生端和教师端，在没有美工的情况的看着还不错吧，哈哈哈！<br><img src="/uploads/2016/03/xdpaper_login.png" alt="登陆界面"><br>导师的论文状态查看页面<br><img src="/uploads/2016/03/xdpaper_sp.png" alt="导师的论文状态查看页面"><br>学生的期刊管理列表<br><img src="/uploads/2016/03/xdpaper_p.png" alt="学生的论文管理界面"><br>学生的论文管理界面<br><img src="/uploads/2016/03/xdpaper_s.png" alt="学生的论文管理界面"><br>一篇论文的投稿历史<br><img src="/uploads/2016/03/xdpaper_rec.png" alt="一篇论文的投稿历史"></p>
<p>过一段时间开源</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简单的需求"><a href="#简单的需求" class="headerlink" title="简单的需求"></a>简单的需求</h1><p>作为一名研究僧，写论文是发布你科研成果的必经之路。而整个研究僧生涯即使你很牛B，发的论文不过两三篇。前几年传的那个清华大学的最年轻审稿人拥有几十篇论文可不算啊。而对于你的导师，比如我的导师是副教授，每年招收两名研究生，研一到研三有6名在线学僧。而教授呢，每年可以招收4个甚至更多，这些学生都要发论文，而且还不是一篇两篇。作为一名负责人的导师，他会关注你的论文发表情况，那么问题来了，这么多论文，导师怎么实时掌控你的论文投稿情况呢？靠脑袋记？导师本来就琐事缠身，哪有多余的脑细胞去记这个。脑袋记不住那记在云笔记里？似乎不会占用脑细胞，但是记录起来多麻烦啊！于是和导师的商量下就有了一个开发这么个系统的想法。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu下编译nutch2.3.1]]></title>
    <link href="http://www.hoyoung.net/2016/01/18/Ubuntu%E4%B8%8B%E7%BC%96%E8%AF%91nutch2-3-1/"/>
    <id>http://www.hoyoung.net/2016/01/18/Ubuntu下编译nutch2-3-1/</id>
    <published>2016-01-18T04:04:03.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><a href="/uploads/2016/03/nutch_logo.jpg"><img src="/uploads/2016/03/nutch_logo.jpg" alt="nutch_logo"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>nutch是干什么的想必能来看这篇文章的都了解，就不瞎扯了哈哈！nutch目前分为两个大版本，1.x和2.x，1.x版本已经相当成熟并且可成熟的应用与商业化。2.x版本的官方已经不提供编译好的二进制包，需要我们将源码下载下来自己编译。2.x与1.x的主要区别是存储方式不同，1.x将爬取的信息存储在hadoop的hdfs中，不了解什么是hdfs的可以取看看hadoop的文件系统，实质上就是以文件的方式存储。而2.x将存储分离出来，采用gora这种类似于hibernate，mybatis等持久层框架来管理。gora主要面向于NoSql数据库的映射框架，比如mongodb以及基于hadoop的hbase，同时也支持关系型数据库，比如mysql。<br><a id="more"></a><br>本次编译也是作为学习，所以是最基础的例子，学习就是个循序渐进的过程嘛！本人遵从官方的例子，但是身处天朝，人家歪果仁跑的贼顺溜的例子在我们这里也会出现莫名奇妙的问题。但是都被解决了。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>操作系统：LinuxMint 17.2（除了界面不同，它就是Ubuntu 14.04）</li>
<li>JDK（我一般称作鸡蛋壳）1.7，此次编译的nutch版本已经不支持JDK 1.6</li>
<li>ant构建工具</li>
</ul>
<h1 id="版本的选取"><a href="#版本的选取" class="headerlink" title="版本的选取"></a>版本的选取</h1><p>我直接编译nutch的最新版，即nutch2.3.1，我们打开Apache nutch的首页<a href="http://nutch.apache.org/" target="_blank" rel="external">http://nutch.apache.org/</a><a href="/uploads/2016/03/nutchweb.png"><img src="/uploads/2016/03/nutchweb.png" alt="nutch官网"></a><br>如果了解nutch你会发现hadoop正是诞生于nutch，单机版的nutch可以独立运行，官网上给出的hadoop的要求是分布式版本的nutch的运行环境，本文只讲述单机版的编译，作为学习的话整个分布式的没必要。虽然不需要分布式的，但是我们仍然需要hadoop，因为hbase的运行依赖于hadoop。2.x的nutch把存储部分分离出来，那我们就先用hbase作为存储。我们就选取hadoop1.2.1和hbase0.98.8。我们在这里可以下载到apache的所有发布软件<br><a href="http://archive.apache.org/dist/。我们需要下载下面这些软件包：" target="_blank" rel="external">http://archive.apache.org/dist/。我们需要下载下面这些软件包：</a><br><a href="http://archive.apache.org/dist/hadoop/core/hadoop-1.2.1/hadoop-1.2.1-bin.tar.gz" target="_blank" rel="external">http://archive.apache.org/dist/hadoop/core/hadoop-1.2.1/hadoop-1.2.1-bin.tar.gz</a><br><a href="http://archive.apache.org/dist/hbase/0.98.16/hbase-0.98.16-hadoop2-bin.tar.gz" target="_blank" rel="external">http://archive.apache.org/dist/hbase/0.98.16/hbase-0.98.16-hadoop2-bin.tar.gz</a><br><a href="http://archive.apache.org/dist/nutch/2.3.1/apache-nutch-2.3.1-src.tar.gz。" target="_blank" rel="external">http://archive.apache.org/dist/nutch/2.3.1/apache-nutch-2.3.1-src.tar.gz。</a><br>如果缺少ant工具，还需要下载ant<br><a href="http://archive.apache.org/dist/ant/binaries/binaries/apache-ant-1.9.4-bin.tar.gz" target="_blank" rel="external">http://archive.apache.org/dist/ant/binaries/binaries/apache-ant-1.9.4-bin.tar.gz</a><br>ant的安装也非常的简单，我也不赘述了。</p>
<h1 id="hadoop和hbase的安装"><a href="#hadoop和hbase的安装" class="headerlink" title="hadoop和hbase的安装"></a>hadoop和hbase的安装</h1><p>网上关于这两部分的安装教程多不胜数，我就不再赘述，这里推荐一个<a href="http://www.cnblogs.com/nexiyi/p/hbase_intro_94.html" target="_blank" rel="external">http://www.cnblogs.com/nexiyi/p/hbase_intro_94.html</a></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>先启动hadoop<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/hadoop-1.2.1# ./bin/start-all.sh </div><div class="line">Warning: $HADOOP_HOME is deprecated.</div><div class="line"></div><div class="line">starting namenode, logging to /opt/hadoop-1.2.1/libexec/../logs/hadoop-root-namenode-ubuntu.out</div><div class="line">localhost: starting datanode, logging to /opt/hadoop-1.2.1/libexec/../logs/hadoop-root-datanode-ubuntu.out</div><div class="line">localhost: starting secondarynamenode, logging to /opt/hadoop-1.2.1/libexec/../logs/hadoop-root-secondarynamenode-ubuntu.out</div><div class="line">starting jobtracker, logging to /opt/hadoop-1.2.1/libexec/../logs/hadoop-root-jobtracker-ubuntu.out</div><div class="line">localhost: starting tasktracker, logging to /opt/hadoop-1.2.1/libexec/../logs/hadoop-root-tasktracker-ubuntu.out</div></pre></td></tr></table></figure></p>
<p>使用jps命令查看启动情况<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/hadoop-1.2.1# jps</div><div class="line">2131 TaskTracker</div><div class="line">1589 NameNode</div><div class="line">1891 SecondaryNameNode</div><div class="line">1738 DataNode</div><div class="line">1976 JobTracker</div><div class="line">2183 Jps</div></pre></td></tr></table></figure></p>
<p>hadoop的五个进程都已经启动了<br>然后启动hbase<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/hadoop-1.2.1# cd ../hbase-0.98.8-hadoop1/</div><div class="line">root@ubuntu:/opt/hbase-0.98.8-hadoop1# ./bin/start-hbase.sh </div><div class="line">starting master, logging to /opt/hbase-0.98.8-hadoop1/bin/../logs/hbase-root-master-ubuntu.out</div><div class="line">root@ubuntu:/opt/hbase-0.98.8-hadoop1# jps</div><div class="line">2131 TaskTracker</div><div class="line">2398 HMaster</div><div class="line">1589 NameNode</div><div class="line">1891 SecondaryNameNode</div><div class="line">1738 DataNode</div><div class="line">1976 JobTracker</div><div class="line">2513 Jps</div></pre></td></tr></table></figure></p>
<p>可以看到hbase的进程HMaster已经启动了</p>
<p>接下来进入编译前的配置<br>解压apache-nutch-2.3.1-src.tar.gz到指定目录下，我解压到了/opt<br>我的目录结构是下面这样：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt# ls</div><div class="line">ant-1.9.4     hbase-0.98.8-hadoop1  jdk1.7.0_21</div><div class="line">hadoop-1.2.1  hive-0.12.0           nutch-2.3.1</div></pre></td></tr></table></figure></p>
<p>修改nutch-site.xml文件，设置HBaseStore<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>storage.data.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.gora.hbase.store.HBaseStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Default class for storing data<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改ivy/ivy.xml，将此段代码的注释去掉<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span> <span class="attr">org</span>=<span class="string">"org.apache.gora"</span> <span class="attr">name</span>=<span class="string">"gora-hbase"</span> <span class="attr">rev</span>=<span class="string">"0.6.1"</span> <span class="attr">conf</span>=<span class="string">"*-&gt;default"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改ivy/ivysettings.xml，这个很关键，nutch依赖的很多jar包来自于maven仓库，而默认设置的maven仓库在我们国内访问非常非常慢，甚至会访问不到。我们需要将默认的仓库改为开源中国的镜像地址<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"repo.maven.org"</span></span></div><div class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"http://maven.oschina.net/content/groups/public/"</span></span></div><div class="line"><span class="tag">    <span class="attr">override</span>=<span class="string">"false"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>OK,我们来执行编译<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">ant runtime</div></pre></td></tr></table></figure></p>
<p>编译完成后会在当前目录下生成一个runtime目录，里面编译好的程序就放置在里面。<br>但是编译却不是如此的顺利，我们发现编译过程会一直卡在那不动。根据以往的经验，这一定是在做远程访问但是又访问不到，于是查看ivysettings.xml发现，除了maven仓库，还有一个仓库叫做oss.sonatype.org的仓库。我一开始的想法是觉得，反正已经有了oschina的库了，那把这个多余的仓库去掉吧。但是去掉之后虽然不在编译过程不会卡在那不动了，但是有的包它配置的来源是oss.sonatype.org，可是oss.sonatype.org对应的仓库又访问不到，我不禁暗想，既然是一样的仓库，那我把它的地址也改成oschina的，于是做了下面的修改：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"oss.sonatype.org"</span> </span></div><div class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"http://maven.oschina.net/content/groups/public/"</span> </span></div><div class="line"><span class="tag">    <span class="attr">override</span>=<span class="string">"false"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>再次去执行编译，经过8分钟后，终于看到了success，编译成功了，哈哈！<br>我们进入到runtime目录，这里有两个目录，deploy和local，其中deploy是运行在hadoop上的分布式的，local是单机版的，我们只需单机版就行了，进入local目录。<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/nutch-2.3.1# cd runtime/</div><div class="line">root@ubuntu:/opt/nutch-2.3.1/runtime# ls</div><div class="line">deploy  local</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>兴奋的编译成功之后，还要进行一下测试呀，毕竟我们编译nutch就是为了要用啊。我们抓取一个网站试试。在当前一个目录新建一个叫urls的目录，在里面新建一个文本文件作为待抓取的URL种子文件。<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/nutch-2.3.1/runtime/local# ls urls/</div><div class="line">seed.txt</div><div class="line">root@ubuntu:/opt/nutch-2.3.1/runtime/local# cat urls/seed.txt </div><div class="line">http://em.xidian.edu.cn/</div></pre></td></tr></table></figure></p>
<p>我抓取的是我所在学院的官网。<br>有了种子文件之后我们还需要制定url过滤规则，这个很重要，nutch在抓取的过程中会解析页面中的链接然后加入到待爬取的任务中，如果没有过滤规则，那么这个爬虫将顺着url抓取整个互联网的web页面。<br>我们编辑conf/regex-urlfilter.txt文件，这里面可以使用正则表达式来过滤制定规则的url，我们修改最后一行：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"># accept anything else</div><div class="line">+em.xidian.edu.cn</div></pre></td></tr></table></figure></p>
<p>+号表示接受，这个语句表示我们只要包含em.xidian.edu.cn的链接。<br>OK，开始抓取，很兴奋吧！我也忘记了从哪个版本开始，nutch将crawl命令从nutch中分离出来。如果我们不知道命令格式，可以输入不带任何参数的命令看看：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/nutch-2.3.1/runtime/local# ./bin/crawl </div><div class="line">Unknown # of arguments 0</div><div class="line">Usage: crawl <span class="tag">&lt;<span class="name">seedDir</span>&gt;</span> <span class="tag">&lt;<span class="name">crawlID</span>&gt;</span> [<span class="tag">&lt;<span class="name">solrUrl</span>&gt;</span>] <span class="tag">&lt;<span class="name">numberOfRounds</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>参数解释：</p>
<ul>
<li>seedDir 是url种子所在的目录，我们这里是刚刚创建的含有seed.txt的urls目录</li>
<li>crawlID 为本次抓取取个名称，这个名称会成为hbase的仓库名</li>
<li>solrUrl 可选参数，如果我们安装了solr，我们提供solr的地址，nutch会将解析结果索引在solr中，这个以后再讲</li>
<li>numberOfRounds 这个指定抓取深度，指的是url的深度</li>
</ul>
<p>我们执行命令来抓取：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/nutch-2.3.1/runtime/local# ./bin/crawl urls/ test_hello 2</div><div class="line">No SOLRURL specified. Skipping indexing.</div><div class="line">Injecting seed URLs</div><div class="line">/opt/nutch-2.3.1/runtime/local/bin/nutch inject urls/ -crawlId test_hello</div><div class="line">InjectorJob: starting at 2016-03-18 15:23:26</div><div class="line">InjectorJob: Injecting urlDir: urls</div><div class="line">InjectorJob: Using class org.apache.gora.hbase.store.HBaseStore as the Gora storage class.</div><div class="line">InjectorJob: total number of urls rejected by filters: 0</div><div class="line">InjectorJob: total number of urls injected after normalization and filtering: 1</div><div class="line">Injector: finished at 2016-03-18 15:23:41, elapsed: 00:00:15</div><div class="line">Fri Mar 18 15:23:42 CST 2016 : Iteration 1 of 2</div><div class="line">Generating batchId</div><div class="line">Generating a new fetchlist</div><div class="line">/opt/nutch-2.3.1/runtime/local/bin/nutch generate -D mapred.reduce.tasks=2 -D mapred.child.java.opts=-Xmx1000m -D mapred.reduce.tasks.speculative.execution=false -D mapred.map.tasks.speculative.execution=false -D mapred.compress.map.output=true -topN 50000 -noNorm -noFilter -adddays 0 -crawlId test_hello -batchId 1458285822-20389</div><div class="line">GeneratorJob: starting at 2016-03-18 15:23:48</div><div class="line">GeneratorJob: Selecting best-scoring urls due for fetch.</div><div class="line">GeneratorJob: starting</div><div class="line">GeneratorJob: filtering: false</div><div class="line">GeneratorJob: normalizing: false</div><div class="line">GeneratorJob: topN: 50000</div><div class="line">GeneratorJob: finished at 2016-03-18 15:24:05, time elapsed: 00:00:16</div><div class="line">GeneratorJob: generated batch id: 1458285822-20389 containing 1 URLs</div><div class="line">Fetching : </div><div class="line">/opt/nutch-2.3.1/runtime/local/bin/nutch fetch -D mapred.reduce.tasks=2 -D mapred.child.java.opts=-Xmx1000m -D mapred.reduce.tasks.speculative.execution=false -D mapred.map.tasks.speculative.execution=false -D mapred.compress.map.output=true -D fetcher.timelimit.mins=180 1458285822-20389 -crawlId test_hello -threads 50</div><div class="line">FetcherJob: starting at 2016-03-18 15:24:12</div><div class="line">FetcherJob: batchId: 1458285822-20389</div><div class="line">FetcherJob: threads: 50</div><div class="line">FetcherJob: parsing: false</div><div class="line">FetcherJob: resuming: false</div><div class="line">FetcherJob : timelimit set for : 1458296652357</div></pre></td></tr></table></figure></p>
<p>开始工作了，等一会儿之后按ctrl+c停止，进入hbase查看抓取数据。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">root@ubuntu:/opt/hbase-0.98.8-hadoop1# ./bin/hbase shell</div><div class="line">HBase Shell; enter 'help<span class="tag">&lt;<span class="name">RETURN</span>&gt;</span>' for list of supported commands.</div><div class="line">Type "exit<span class="tag">&lt;<span class="name">RETURN</span>&gt;</span>" to leave the HBase Shell</div><div class="line">Version 0.98.8-hadoop1, r6cfc8d064754251365e070a10a82eb169956d5fe, Fri Nov 14 17:14:19 PST 2014</div><div class="line"></div><div class="line">hbase(main):001:0&gt; list</div><div class="line">TABLE                                                                           </div><div class="line">SLF4J: Class path contains multiple SLF4J bindings.</div><div class="line">SLF4J: Found binding in [jar:file:/opt/hbase-0.98.8-hadoop1/lib/slf4j-log4j12-1.6.4.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: Found binding in [jar:file:/opt/hadoop-1.2.1/lib/slf4j-log4j12-1.4.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</div><div class="line">test                                                                            </div><div class="line">test_hello_webpage                                                              </div><div class="line">xdem_webpage                                                                    </div><div class="line">3 row(s) in 1.9820 seconds</div><div class="line"></div><div class="line">=&gt; ["test", "test_hello_webpage", "xdem_webpage"]</div><div class="line">hbase(main):002:0&gt;</div></pre></td></tr></table></figure>
<p>可以看到有一张表名叫做test_hello_webpage，test_hello就是我们刚刚定义的crawlID，下面看一下里面的数据：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">hbase(main):007:0&gt; scan 'test_hello_webpage'</div></pre></td></tr></table></figure></p>
<p>数据太多这里显示不全就不贴出来了。<br>其实官网有非常详细的教程，都是英文的就不说了。主要是那些文档的编写者和我们可不是同于同一个网络环境，我们国内访问那些站点是存在障碍的，这会给像我一样的小白们造成很多的困扰，不过幸好有些东西我们天朝的也能用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="/uploads/2016/03/nutch_logo.jpg"><img src="/uploads/2016/03/nutch_logo.jpg" alt="nutch_logo"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>nutch是干什么的想必能来看这篇文章的都了解，就不瞎扯了哈哈！nutch目前分为两个大版本，1.x和2.x，1.x版本已经相当成熟并且可成熟的应用与商业化。2.x版本的官方已经不提供编译好的二进制包，需要我们将源码下载下来自己编译。2.x与1.x的主要区别是存储方式不同，1.x将爬取的信息存储在hadoop的hdfs中，不了解什么是hdfs的可以取看看hadoop的文件系统，实质上就是以文件的方式存储。而2.x将存储分离出来，采用gora这种类似于hibernate，mybatis等持久层框架来管理。gora主要面向于NoSql数据库的映射框架，比如mongodb以及基于hadoop的hbase，同时也支持关系型数据库，比如mysql。<br>]]>
    
    </summary>
    
      <category term="Nutch" scheme="http://www.hoyoung.net/tags/Nutch/"/>
    
      <category term="爬虫" scheme="http://www.hoyoung.net/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[R语言分词发并绘制词云]]></title>
    <link href="http://www.hoyoung.net/2016/01/04/R%E8%AF%AD%E8%A8%80%E5%88%86%E8%AF%8D%E5%8F%91%E5%B9%B6%E7%BB%98%E5%88%B6%E8%AF%8D%E4%BA%91/"/>
    <id>http://www.hoyoung.net/2016/01/04/R语言分词发并绘制词云/</id>
    <published>2016-01-04T03:10:04.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/images/R/ciyun.jpg" alt="词云"></p>
<h3 id="关于分词"><a href="#关于分词" class="headerlink" title="关于分词"></a>关于分词</h3><p>　　玩文本挖掘一定少不了分词，自己找了两个R语言的分词包，一个是Rwordseg，安装这个包之前必须配置好Java环境并且安装rJava，因为它调用的是Java的一个分词工具叫ansj，这是一个鼎鼎大名的中文分析系统ictclas的Java实现。另一个是jiebaR，这是github上的一个开源项目，安装这个包和安装其他普通的包一样，非常的方便，准确率和Rwordseg相差无几，但是效率要高，于是选用了这个分词工具。这是jiebaR的github地址<code>https://github.com/qinwf/jiebaR</code>，安装方式和中文帮助文档都在上面。<br><a id="more"></a></p>
<h3 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h3><p>　　要分词，得有文本数据，最近突然对数据挖掘感兴趣，想了解数据挖掘的就业情况，于是自己写了个简单的网络爬虫，从互联网领域比较专业招聘网站“拉勾网”爬取了1020条数据挖掘职位的招聘信息。我已近从数据库中导出为csv文件。由于我是在windows环境下做实验的，数据文件的格式要转成ANSI的，我都已经转换过了。</p>
<ul>
<li><p>设置工作空间</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">setwd(<span class="string">"E:\\tmp\\分词"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>读取职位信息，爬取的职位信息一共有四十多个字段，我们只需要其中的职位描述description</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">position = read.csv(file=<span class="string">"position_1450922618842_.csv"</span>,header = <span class="literal">T</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/uploads/images/R/gongzuo.jpg" alt="职位"></p>
<ul>
<li><p>加载jiebaR中文分词</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line"><span class="keyword">library</span>(jiebaR)</div></pre></td></tr></table></figure>
</li>
<li><p>将因子转为字符</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">doc=as.character(position$description)</div></pre></td></tr></table></figure>
</li>
<li><p>英文转为大写，便于统一英文单词，比如Java和java是一样的</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">doc = toupper(doc)</div></pre></td></tr></table></figure>
</li>
<li><p>设置分词器，分词器的设置我不赘述，大家可以详细参阅jiebaR的说明<br><code>mixseg = worker(type = &quot;mix&quot;)</code></p>
</li>
<li><p>创建一个向量用于合并分词结果</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">doc_all=c()</div></pre></td></tr></table></figure>
</li>
<li><p>逐个对一条条的职位描述信息进行分词并合并</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(doc))&#123;</div><div class="line">  doc_all=c(doc_all,c(segment(doc[i],mixseg)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>去除1. 2. 3.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">doc_words = doc_all[which(grepl(<span class="string">"\\d+\\.?"</span>,doc_all)==<span class="literal">F</span>)]</div></pre></td></tr></table></figure>
</li>
<li><p>计算词频</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">res = freq(doc_words)</div></pre></td></tr></table></figure>
</li>
<li><p>读取停止词</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">stopwords=read.table(file = <span class="string">"chinese_stopword.txt"</span>,</div><div class="line">                     encoding = <span class="string">"utf-8"</span>,</div><div class="line">                     colClasses = <span class="string">"character"</span>,</div><div class="line">                     fileEncoding = <span class="string">"utf-8"</span>,</div><div class="line">                     header = <span class="literal">F</span>)</div><div class="line">stopwords=stopwords$V1</div></pre></td></tr></table></figure>
</li>
<li><p>扩充停止词</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">stopwords=c(stopwords,c(<span class="string">"数据挖掘"</span>,<span class="string">"职位"</span>,<span class="string">"nbsp"</span>,<span class="string">"描述"</span>,<span class="string">"NBSP"</span>,<span class="string">"AND"</span>,<span class="string">"OR"</span>,<span class="string">"TO"</span>,<span class="string">"工作"</span>,<span class="string">"技术"</span>,<span class="string">"数据"</span>,<span class="string">"能力"</span>,<span class="string">"经验"</span>,<span class="string">"熟悉"</span>,<span class="string">"用户"</span>,<span class="string">"负责"</span>,<span class="string">"公司"</span>,<span class="string">"提供"</span>,<span class="string">"任职"</span>,<span class="string">"以上学历"</span>,<span class="string">"优先"</span>,<span class="string">"专业"</span>,<span class="string">"需求"</span>))</div></pre></td></tr></table></figure>
</li>
<li><p>删除停止词</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">res=res[-which(res$char %<span class="keyword">in</span>% stopwords),]</div></pre></td></tr></table></figure>
</li>
<li><p>这里我们过滤了中文词汇，因为在这里我只想看看目前数据挖掘领域使用最多的工具到底是什么，而这些工具一般都是英文的名称</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">res=res[which(substr(res$char,<span class="number">1</span>,<span class="number">1</span>) %<span class="keyword">in</span>% c(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>,<span class="string">"G"</span>,<span class="string">"H"</span>,<span class="string">"I"</span>,<span class="string">"J"</span>,<span class="string">"K"</span>,<span class="string">"L"</span>,<span class="string">"M"</span>,<span class="string">"N"</span>,<span class="string">"O"</span>,<span class="string">"P"</span>,<span class="string">"Q"</span>,<span class="string">"R"</span>,<span class="string">"S"</span>,<span class="string">"T"</span>,<span class="string">"U"</span>,<span class="string">"V"</span>,<span class="string">"W"</span>,<span class="string">"X"</span>,<span class="string">"Y"</span>,<span class="string">"Z"</span>)),]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/uploads/images/R/cipin.png" alt="词频"></p>
<ul>
<li><p>加载绘制词云的包</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line"><span class="keyword">library</span>(wordcloud)</div></pre></td></tr></table></figure>
</li>
<li><p>绘制词云</p>
<figure class="highlight r"><table><tr><td class="code"><pre><div class="line">wordcloud(res$char,res$freq</div><div class="line">          ,min.freq = <span class="number">1</span>  <span class="comment">#最低出现的频率</span></div><div class="line">          ,random.order = <span class="literal">F</span> <span class="comment">#是否随机排序</span></div><div class="line">          ,colors = brewer.pal(<span class="number">8</span>,<span class="string">"Dark2"</span>) <span class="comment">#颜色</span></div><div class="line">          ,scale = <span class="number">3.5</span>*c(<span class="number">1</span>,<span class="number">0.25</span>) <span class="comment">#图的放大倍数</span></div><div class="line">          ,max.words = <span class="number">90</span> <span class="comment">#前90个词</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　最终的图形就是本文的第一张图，词出现的频数越大，则显示的越大，频数由中心向两边减少。Hadoop作为目前大数据处理事实上的标准，招聘的时候一般都会有所要求，Hadoop是Java编写的而且MapReduce程序也是要Java来写的，并且目前流行的网络爬虫开发也大多是用Java，所以Java在数据挖掘领域使用的也很多，  然后还有灵活而强大的Python。同时Hive、MapReduce、Hbase、Mahout这些Hadoop周边产品也出现的较多。<br><strong><em>源码和数据文件的下载地址  <code>http://pan.baidu.com/s/1mgQ6ksC</code></em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/images/R/ciyun.jpg" alt="词云"></p>
<h3 id="关于分词"><a href="#关于分词" class="headerlink" title="关于分词"></a>关于分词</h3><p>　　玩文本挖掘一定少不了分词，自己找了两个R语言的分词包，一个是Rwordseg，安装这个包之前必须配置好Java环境并且安装rJava，因为它调用的是Java的一个分词工具叫ansj，这是一个鼎鼎大名的中文分析系统ictclas的Java实现。另一个是jiebaR，这是github上的一个开源项目，安装这个包和安装其他普通的包一样，非常的方便，准确率和Rwordseg相差无几，但是效率要高，于是选用了这个分词工具。这是jiebaR的github地址<code>https://github.com/qinwf/jiebaR</code>，安装方式和中文帮助文档都在上面。<br>]]>
    
    </summary>
    
      <category term="分词" scheme="http://www.hoyoung.net/tags/%E5%88%86%E8%AF%8D/"/>
    
      <category term="词云" scheme="http://www.hoyoung.net/tags/%E8%AF%8D%E4%BA%91/"/>
    
      <category term="R" scheme="http://www.hoyoung.net/categories/R/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[R软件linux环境下设置cran国内镜像]]></title>
    <link href="http://www.hoyoung.net/2015/12/06/R%E8%BD%AF%E4%BB%B6linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BE%E7%BD%AEcran%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>http://www.hoyoung.net/2015/12/06/R软件linux环境下设置cran国内镜像/</id>
    <published>2015-12-06T07:59:07.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/images/R/rlogo.jpg" alt="test"><br>我们在使用R软件的时候经常需要安装一些软件包，而R软件默认的cran源是国外的，我们可以修改R的配置文件，添加国内的镜像源，这样在安装R的包时包的下载速度会很快。<br><a id="more"></a><br>R在linux环境下配置文件默认放置在/etc/R/目录下<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">hoyoung@hoyoung:/etc/R$ ls</div><div class="line">ldpaths Renviron repositories Rprofile.site~</div><div class="line">Makeconf Renviron.site Rprofile.site</div><div class="line">我们修改Rprofile.site文件，将下面这段代码的注释去掉</div><div class="line"><span class="comment"># ## Example of Rprofile.site</span></div><div class="line"> local(&#123;</div><div class="line">  <span class="comment"># add MASS to the default packages, set a CRAN mirror</span></div><div class="line">  old &lt;- getOption(<span class="string">"defaultPackages"</span>); r &lt;- getOption(<span class="string">"repos"</span>)</div><div class="line">  r[<span class="string">"CRAN"</span>] &lt;- <span class="string">"http://mirror.bjtu.edu.cn/cran"</span></div><div class="line">  options(defaultPackages = c(old, <span class="string">"MASS"</span>), repos = r)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>将其中的镜像改为国内的一个镜像地址，其他的国内站点还有</p>
<ul>
<li>Beijing Jiaotong University<ul>
<li><a href="http://mirror.bjtu.edu.cn/cran/" target="_blank" rel="external">http://mirror.bjtu.edu.cn/cran/</a></li>
</ul>
</li>
<li>Chinese Academy of Sciences<ul>
<li><a href="http://mirrors.opencas.cn/cran/" target="_blank" rel="external">http://mirrors.opencas.cn/cran/</a></li>
</ul>
</li>
<li>TUNA Team, Tsinghua University<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/CRAN/</a></li>
</ul>
</li>
<li>Xiamen University<ul>
<li><a href="http://mirrors.xmu.edu.cn/CRAN/" target="_blank" rel="external">http://mirrors.xmu.edu.cn/CRAN/</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/images/R/rlogo.jpg" alt="test"><br>我们在使用R软件的时候经常需要安装一些软件包，而R软件默认的cran源是国外的，我们可以修改R的配置文件，添加国内的镜像源，这样在安装R的包时包的下载速度会很快。<br>]]>
    
    </summary>
    
      <category term="镜像源" scheme="http://www.hoyoung.net/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    
      <category term="Linux" scheme="http://www.hoyoung.net/tags/Linux/"/>
    
      <category term="R" scheme="http://www.hoyoung.net/categories/R/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu14.04安装最新版R]]></title>
    <link href="http://www.hoyoung.net/2015/12/06/Ubuntu14.04%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88R/"/>
    <id>http://www.hoyoung.net/2015/12/06/Ubuntu14.04安装最新版R/</id>
    <published>2015-12-06T06:03:36.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/images/R/rlogo.jpg" alt="test"><br>最近使用R语言进行文本挖掘，本来在windows下进行，但是发现windows下的R在读取停止词和进行分词时由于编码问题时长出问题。于是想着先在linux环境下测试通过再回到windows下尝试。在Ubuntu下使用sudo apt-get install r-base安装软件包中的R，这个R的版本是3.0.1，而最新的版本是3.2.2，而且在安装某些R的包时提示版本过时，于是本人结合R官网给出的安装提示以及解决了一些安装问题，特此记录。<br><a id="more"></a></p>
<h3 id="加入软件源"><a href="#加入软件源" class="headerlink" title="加入软件源"></a>加入软件源</h3><p>将R的软件源加入Ubuntu的软件源列表中，编辑/etc/apt/sources.list文件添加<br><code>deb https://&lt;my.favorite.cran.mirror&gt;/bin/linux/ubuntu trusty/</code></p>
<p><strong>说明：</strong></p>
<ol>
<li><span style="color: #ff0000;">&lt;my.favorite.cran.mirror&gt;</span>是指你常用的镜像源，这里<a href="https://cran.r-project.org/mirrors.html" target="_blank" rel="external">https://cran.r-project.org/mirrors.html</a>有R的镜像源列表，我们选择一个中国的软件源。比如我设置的是deb <a href="http://mirror.bjtu.edu.cn/cran/bin/linux/ubuntu" target="_blank" rel="external">http://mirror.bjtu.edu.cn/cran/bin/linux/ubuntu</a> trusty/</li>
<li><span style="color: #ff0000;">trusty</span>指的是Ubuntu的版本代号，比如我的14.04的代号是trusty，可以在这里查找<a href="https://wiki.ubuntu.com/Releases" target="_blank" rel="external">https://wiki.ubuntu.com/Releases</a>加入软件源列表后，执行sudo apt-get update更新软件源列表。</li>
</ol>
<p>###添加公钥<br>如果更新的时候报错<br><a href="/uploads/2015/12/2015-12-06_132953.png"><img src="/uploads/2015/12/2015-12-06_132953.png" alt="2015-12-06_132953"></a><br>执行如下命令：</p>
<p><code>sudo gpg --keyserver keyserver.ubuntu.com --recv 51716619E084DAB9</code></p>
<p><code>sudo gpg --export --armor 51716619E084DAB9| sudo apt-key add -</code></p>
<p>其中<span style="color: #ff0000;">51716619E084DAB9</span>是提示缺失的公钥，加入公钥后再次sudo apt-get update更新软件源列表</p>
<p>###安装</p>
<p><code>sudo apt-get install r-base</code></p>
<p>安装完成后查看R的版本号，已经是最新的3.2.2</p>
<p><a href="/uploads/2015/12/2015-12-06_140137.png"><img src="/uploads/2015/12/2015-12-06_140137.png" alt="2015-12-06_140137"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/images/R/rlogo.jpg" alt="test"><br>最近使用R语言进行文本挖掘，本来在windows下进行，但是发现windows下的R在读取停止词和进行分词时由于编码问题时长出问题。于是想着先在linux环境下测试通过再回到windows下尝试。在Ubuntu下使用sudo apt-get install r-base安装软件包中的R，这个R的版本是3.0.1，而最新的版本是3.2.2，而且在安装某些R的包时提示版本过时，于是本人结合R官网给出的安装提示以及解决了一些安装问题，特此记录。<br>]]>
    
    </summary>
    
      <category term="R语言" scheme="http://www.hoyoung.net/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Ubuntu" scheme="http://www.hoyoung.net/tags/Ubuntu/"/>
    
      <category term="R" scheme="http://www.hoyoung.net/categories/R/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java实现的慕课网视频下载工具]]></title>
    <link href="http://www.hoyoung.net/2015/11/29/Java%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%85%95%E8%AF%BE%E7%BD%91%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.hoyoung.net/2015/11/29/Java实现的慕课网视频下载工具/</id>
    <published>2015-11-28T16:09:08.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p><a href="/uploads/2015/11/示例图.png"><img src="/uploads/2015/11/示例图.png" alt=""></a></p>
<p>　　作为一个IT汪，自己经常在慕课网上看视频学些混饭吃的挨踢打怪技能，自己觉得慕课网的视频短小，不拖泥带水，结构清晰。如果能把视频分章节都保存下来的话那就好了。<br>慕课网的app提供了缓存的功能，但是手机内存有限啊（自己的手机的存储都是乞丐版的16G的），存不了几个视频就满了。慕课网的app缓存到手机内存卡，是能播放的mp4文件，但是问题来了，这些视频文件的命名是数字，我累个去，即使你把视频从内存卡里导出也要一个个的看一便再将其归类，太麻烦了。自己之前写了个爬虫程序来对这些不按照内容命名的视频文件进行重命名，自己用的还行，但还是觉得麻烦，于是直接写了个完整的下载工具。<br><a id="more"></a><br>　　支持多线程并行下载（我把并行最大下载量限制在了3个，以前并发太大实习工地的网管说我挂迅雷）和断点续传（这个要感谢网友提供的代码）哦！其实原理真的很简单，众多的技术大神们可不要见笑啦！<br>使用时安装好运行java的鸡蛋壳（JDK），windows、linux、mac os下都可以用，下载后解压，按照图中的命令执行jar文件就行了，下载的时候会在jar文件所在文件夹下创建保存目录！</p>
<p>　　下面是下载完成后的文件目录，文件的名称保持了原有章节的顺序，并且显示了视频时长。</p>
<p><a href="/uploads/2015/11/2015-11-29_172759.png"><img src="/uploads/2015/11/2015-11-29_172759.png" alt="2015-11-29_172759"></a></p>
<p><strong>下载地址在这里：<a href="http://pan.baidu.com/s/1mgERRCW" target="_blank" rel="external">http://pan.baidu.com/s/1mgERRCW</a></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="/uploads/2015/11/示例图.png"><img src="/uploads/2015/11/示例图.png" alt=""></a></p>
<p>　　作为一个IT汪，自己经常在慕课网上看视频学些混饭吃的挨踢打怪技能，自己觉得慕课网的视频短小，不拖泥带水，结构清晰。如果能把视频分章节都保存下来的话那就好了。<br>慕课网的app提供了缓存的功能，但是手机内存有限啊（自己的手机的存储都是乞丐版的16G的），存不了几个视频就满了。慕课网的app缓存到手机内存卡，是能播放的mp4文件，但是问题来了，这些视频文件的命名是数字，我累个去，即使你把视频从内存卡里导出也要一个个的看一便再将其归类，太麻烦了。自己之前写了个爬虫程序来对这些不按照内容命名的视频文件进行重命名，自己用的还行，但还是觉得麻烦，于是直接写了个完整的下载工具。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[递归算法的幂运算]]></title>
    <link href="http://www.hoyoung.net/2015/08/16/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E5%B9%82%E8%BF%90%E7%AE%97/"/>
    <id>http://www.hoyoung.net/2015/08/16/递归算法的幂运算/</id>
    <published>2015-08-16T06:49:59.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>Java代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">	 * 求x的n次方</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> n</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> x;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;<span class="comment">// 偶数</span></div><div class="line">			<span class="keyword">return</span> pow(x*x,n/<span class="number">2</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">// 奇数</span></div><div class="line">			<span class="keyword">return</span> pow(x*x,(n-<span class="number">1</span>)/<span class="number">2</span>)*x;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>比如求3的6次幂，被分解为求3<em>3的3次幂-&gt;9</em>9的2次幂<em>9-&gt;81的1次幂</em>9，减少了循环迭代的次数</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div c]]>
    </summary>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[判断一个书是否为2的n次方]]></title>
    <link href="http://www.hoyoung.net/2015/08/16/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E4%B9%A6%E6%98%AF%E5%90%A6%E4%B8%BA2%E7%9A%84n%E6%AC%A1%E6%96%B9/"/>
    <id>http://www.hoyoung.net/2015/08/16/判断一个书是否为2的n次方/</id>
    <published>2015-08-16T06:37:03.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>Java代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">	 * 是否为2的n次方形式</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> m</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">is2power</span><span class="params">(<span class="keyword">long</span> m)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (m &amp;lt;= <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (m &amp;amp; (m - <span class="number">1</span>)) == <span class="number">0</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>比如2的16次方的二进制和2的16次方减1的二进制形式分别为<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">10000000000000000</span></div><div class="line"><span class="number">01111111111111111</span></div></pre></td></tr></table></figure></p>
<p>上下做二进制的与运算则结果为0</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div c]]>
    </summary>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[欧几里得算法及证明]]></title>
    <link href="http://www.hoyoung.net/2015/08/16/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%8F%8A%E8%AF%81%E6%98%8E/"/>
    <id>http://www.hoyoung.net/2015/08/16/欧几里得算法及证明/</id>
    <published>2015-08-16T06:06:54.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<p>代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 欧几里得算法，求m,n的最大公约数</span></div><div class="line"><span class="comment">* 算法基于定理：(m,n)和(n,m mod n)的公约数是一样的</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> m</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> n</span></div><div class="line"><span class="comment">* <span class="doctag">@return</span></span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> m, <span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">long</span> rep = m % n;</div><div class="line">        m = n;</div><div class="line">        n = rep;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###证明：<br>设M = KN + R<br>假设D为M,N的公约数，则M = XmD,N = XnD，其中Xm，Xn为整数<br>R = M - KN = (Xm-KXn)D<br>所以(M,N)的公约数和(N,M mod N)的公约数是一样的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class]]>
    </summary>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 160空格]]></title>
    <link href="http://www.hoyoung.net/2015/08/10/Java_160%E7%A9%BA%E6%A0%BC/"/>
    <id>http://www.hoyoung.net/2015/08/10/Java_160空格/</id>
    <published>2015-08-10T08:13:02.000Z</published>
    <updated>2017-09-08T16:17:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="160空格……"><a href="#160空格……" class="headerlink" title="160空格……"></a>160空格……</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">System.out.println(StringEscapeUtils.unescapeHtml4(<span class="string">"&amp;nbsp; &amp;nbsp; &amp;nbsp;"</span>).trim());</div><div class="line">System.out.println(StringEscapeUtils.unescapeHtml4(<span class="string">"&amp;nbsp;"</span>).equals(<span class="string">" "</span>));</div><div class="line">System.out.println((<span class="keyword">int</span>)StringEscapeUtils.unescapeHtml4(<span class="string">"&amp;nbsp;"</span>).charAt(<span class="number">0</span>));</div><div class="line">System.out.println((<span class="keyword">int</span>)<span class="string">' '</span>);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">false</span></div><div class="line"><span class="number">160</span></div><div class="line"><span class="number">32</span></div></pre></td></tr></table></figure></p>
<p>　　web页面 在提交的时候到服务器的时候，java String trim 方法只能处理掉ASCII 32空格，我们需要用text.replaceAll(“[\s\u00A0]+$”, “”)来去掉空格。这在些爬虫程序解析页面内容时常遇到的问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="160空格……"><a href="#160空格……" class="headerlink" title="160空格……"></a>160空格……</h3><figure class="highlight java"><table><tr><td class="]]>
    </summary>
    
      <category term="Java" scheme="http://www.hoyoung.net/categories/Java/"/>
    
  </entry>
  
</feed>
